{
  "info": { "title": "Commerce Backend", "version": "1.0.0", "description": "Backend for diferents apps commerce" },
  "basePath": "/api",
  "swagger": "2.0",
  "paths": {
    "/": { "get": { "summary": "Get API version", "description": "App version", "produces": ["application/json"], "tags": ["Base"], "responses": { "200": { "description": "Application and API version", "schema": { "title": "Users", "type": "object", "$ref": "#/definitions/App" } } } } },
    "/commerces/stores/filter": {
      "post": {
        "summary": "Search Stores",
        "description": "Search Stores",
        "produces": ["application/json"],
        "tags": ["Commerces"],
        "security": [{ "Bearer": [] }],
        "parameters": [{ "name": "StoresParams", "description": "POST params search", "in": "body", "required": true, "schema": { "$ref": "#/definitions/SearchStores" } }],
        "responses": { "200": { "description": "Object", "schema": { "title": "SearchStoresResponse", "type": "object", "$ref": "#/definitions/SearchStoresResponse" } }, "400": { "description": "Bad request", "schema": { "$ref": "#/definitions/ValidationError" } }, "500": { "description": "Internal server error", "schema": { "$ref": "#/definitions/ServerError" } } }
      }
    }
  },
  "definitions": {
    "App": { "title": "App", "type": "object", "properties": { "app": { "type": "string" }, "apiVersion": { "type": "string" } } },
    "Store": {
      "title": "Store",
      "type": "object",
      "properties": {
        "id": { "type": "integer", "description": "Unique identifier representing a specific store" },
        "user_id": { "type": "integer", "description": "Unique identifier representing a especific commerce" },
        "name": { "type": "string", "description": "Name of the store" },
        "address": { "type": "string", "description": "Address of the store" },
        "status": { "type": "string", "description": "Status of the store" },
        "latitude": { "type": "string", "description": "Latitude of the store" },
        "longitude": { "type": "string", "description": "Longitude of the store" },
        "created_at": { "type": "string", "format": "date-time", "description": "Store creation datetime" },
        "updated_at": { "type": "string", "format": "date-time", "description": "Store update datetime" },
        "deleted_at": { "type": "string", "format": "date-time", "description": "Store update datetime" }
      }
    },
    "FilterStore": {
      "title": "FilterStore",
      "type": "object",
      "properties": {
        "categoryId": { "type": "integer", "nullable": true, "description": "Category ID of the store" },
        "name": { "type": "string", "nullable": true, "maxLength": 100, "description": "Name of the store" },
        "address": { "type": "string", "nullable": true, "maxLength": 255, "description": "Address of the store" },
        "status": { "type": "string", "nullable": true, "maxLength": 10, "description": "Status of the store" },
        "latitude": { "type": "string", "nullable": true, "maxLength": 100, "pattern": "^[+-]?\\d+(\\.\\d+)?$", "description": "Latitude of the store" },
        "longitude": { "type": "string", "nullable": true, "maxLength": 100, "pattern": "^[+-]?\\d+(\\.\\d+)?$", "description": "Longitude of the store" },
        "page": { "type": "string", "description": "current page" }
      }
    },
    "SearchStores": {
      "title": "SearchStores",
      "type": "object",
      "properties": {
        "filter": { "type": "object", "description": "filter for search stores", "$ref": "#/definitions/FilterStore" },
        "page": { "type": "integer", "minimum": 1, "description": "current page" },
        "pageSize": { "type": "integer", "minimum": 1, "description": "number of element for page" },
        "sort": { "type": "string", "nullable": true, "enum": ["id", "user_id", "category_id", "name", "address", "status", "longitude", "latitude", "discount", "commission", "created_at"], "description": "sort list" },
        "order": { "type": "string", "nullable": true, "enum": ["asc", "desc"], "description": "order by" }
      },
      "required": ["filter", "page", "pageSize"]
    },
    "SearchStoresResponse": { "title": "SearchStoresResponse", "type": "object", "properties": { "pagination": { "type": "object", "description": "Pagination info", "$ref": "#/definitions/Pagination" }, "stores": { "type": "array", "items": { "title": "Stores", "type": "object", "$ref": "#/definitions/Store" } } } },
    "Pagination": { "title": "Pagination", "type": "object", "properties": { "page": { "type": "number", "description": "Page result" }, "pageSize": { "type": "number", "description": "Size of result per page" }, "rowCount": { "type": "number", "description": "Total count of results" }, "pageCount": { "type": "number", "description": "Total count of pages" } } },
    "ListStoresResponse": { "title": "ListStoresResponse", "type": "object", "properties": { "stores": { "type": "array", "items": { "title": "Stores", "type": "object", "$ref": "#/definitions/Store" } } } },
    "Error": { "title": "Error", "type": "object", "properties": { "code": { "type": "integer", "format": "int32" }, "message": { "type": "string" } } },
    "ServerError": { "allOf": [{ "$ref": "#/definitions/Error" }, { "title": "ServerError" }] },
    "NotFoundError": { "allOf": [{ "$ref": "#/definitions/Error" }, { "title": "NotFoundError" }] },
    "ValidationError": { "allOf": [{ "$ref": "#/definitions/Error" }, { "title": "ValidationError" }, { "properties": { "details": { "type": "array", "items": { "title": "FieldError", "type": "object", "properties": { "message": { "type": "string" }, "param": { "type": "string" } } } } } }] }
  },
  "responses": {},
  "parameters": {},
  "securityDefinitions": { "Bearer": { "description": "For accessing the API a valid JWT token must be passed in all the queries in the 'Authorization' header. <br><br>A valid JWT token is generated by the API and retourned as answer of a call to the route /token giving a valid user & password.<br><br>", "type": "apiKey", "name": "Authorization", "in": "header" } },
  "tags": []
}
