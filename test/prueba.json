{
  "info": {
    "title": "Commerce Backend",
    "version": "1.0.0",
    "description": "Backend for diferents apps commerce"
  },
  "basePath": "/api",
  "swagger": "2.0",
  "paths": {
    "/": {
      "get": {
        "summary": "Get API version",
        "description": "App version",
        "produces": ["application/json"],
        "tags": ["Base"],
        "responses": {
          "200": {
            "description": "Application and API version",
            "schema": {
              "title": "Users",
              "type": "object",
              "$ref": "#/definitions/App"
            }
          }
        }
      }
    },
    "/auth/token/commerce": {
      "post": {
        "summary": "Token request",
        "description": "Create token for an user from commerce app",
        "produces": ["application/json"],
        "tags": ["Auth"],
        "parameters": [
          {
            "name": "userParams",
            "description": "POST params for an user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginCommerce"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly token for user",
            "schema": {
              "title": "Token",
              "type": "object",
              "$ref": "#/definitions/Token"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/auth/token/commerce/refresh": {
      "post": {
        "summary": "Token request with valid refresh token",
        "description": "Create token for an user using valid refresh token",
        "produces": ["application/json"],
        "tags": ["Auth"],
        "parameters": [
          {
            "name": "userParams",
            "description": "POST params for an user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RefreshCommerceToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly token for user",
            "schema": {
              "title": "Token",
              "type": "object",
              "$ref": "#/definitions/TokenNoRef"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "401": {
            "description": "Token invalid",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/auth/token/client": {
      "post": {
        "summary": "Token request",
        "description": "Create token for an user from client app",
        "produces": ["application/json"],
        "tags": ["Auth"],
        "parameters": [
          {
            "name": "userParams",
            "description": "POST params for an user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginClient"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly token for user",
            "schema": {
              "title": "Token",
              "type": "object",
              "$ref": "#/definitions/Token"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/auth/token/client/refresh": {
      "post": {
        "summary": "Token request with valid refresh token",
        "description": "Create token for an user using valid refresh token",
        "produces": ["application/json"],
        "tags": ["Auth"],
        "parameters": [
          {
            "name": "userParams",
            "description": "POST params for an user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RefreshClientToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly token for user",
            "schema": {
              "title": "Token",
              "type": "object",
              "$ref": "#/definitions/TokenNoRef"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "401": {
            "description": "Token invalid",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/auth/token/store": {
      "post": {
        "summary": "Token request",
        "description": "Create token for an user from commerce app",
        "produces": ["application/json"],
        "tags": ["Auth"],
        "parameters": [
          {
            "name": "userParams",
            "description": "POST params for an user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginStore"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly token for user",
            "schema": {
              "title": "Token",
              "type": "object",
              "$ref": "#/definitions/Token"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/auth/token/store/refresh": {
      "post": {
        "summary": "Token request with valid refresh token",
        "description": "Create token for an user using valid refresh token",
        "produces": ["application/json"],
        "tags": ["Auth"],
        "parameters": [
          {
            "name": "userParams",
            "description": "POST params for an user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RefreshStoreToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly token for user",
            "schema": {
              "title": "Token",
              "type": "object",
              "$ref": "#/definitions/TokenNoRef"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "401": {
            "description": "Token invalid",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/auth/token": {
      "post": {
        "summary": "Token request",
        "description": "Create token for an user",
        "produces": ["application/json"],
        "tags": ["Web/Auth"],
        "parameters": [
          {
            "name": "userParams",
            "description": "POST params for an user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly token for user",
            "schema": {
              "title": "Token",
              "type": "object",
              "$ref": "#/definitions/Token"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/auth/token/refresh": {
      "post": {
        "summary": "Token request with valid refresh token",
        "description": "Create token for an user using valid refresh token",
        "produces": ["application/json"],
        "tags": ["Web/Auth"],
        "parameters": [
          {
            "name": "userParams",
            "description": "POST params for an user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RefreshToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly token for user",
            "schema": {
              "title": "Token",
              "type": "object",
              "$ref": "#/definitions/TokenNoRef"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "401": {
            "description": "Token invalid",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/auth/token": {
      "post": {
        "summary": "Token request",
        "description": "Create token for an user",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Auth"],
        "parameters": [
          {
            "name": "userParams",
            "description": "POST params for an user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly token for user",
            "schema": {
              "title": "Token",
              "type": "object",
              "$ref": "#/definitions/Token"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/auth/token/refresh": {
      "post": {
        "summary": "Token request with valid refresh token",
        "description": "Create token for an user using valid refresh token",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Auth"],
        "parameters": [
          {
            "name": "userParams",
            "description": "POST params for an user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RefreshToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly token for user",
            "schema": {
              "title": "Token",
              "type": "object",
              "$ref": "#/definitions/TokenNoRef"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "401": {
            "description": "Token invalid",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/categoriesstore": {
      "get": {
        "summary": "List all categories store",
        "description": "Returns categories store",
        "produces": ["application/json"],
        "tags": ["Web/CategoriesStore"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "ListCategoriesStoreResponse",
              "type": "object",
              "$ref": "#/definitions/ListCategoriesStoreResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/categoriesstore/{id}": {
      "get": {
        "summary": "Show category store",
        "description": "Request info about category store",
        "produces": ["application/json"],
        "tags": ["Web/Admin/CategoriesStore"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Unique identifier of category store",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Category store response",
            "schema": {
              "title": "CategoryStoreResponse",
              "$ref": "#/definitions/CategoryStoreResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "put": {
        "summary": "Update category store",
        "description": "Update category store",
        "produces": ["application/json"],
        "tags": ["Web/Admin/CategoriesStore"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Unique identifier of the category",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "UpdateParams",
            "description": "POST params for update category",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryStoreParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category store response",
            "schema": {
              "title": "CategoryStoreResponse",
              "$ref": "#/definitions/CategoryStoreResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/categoriesstore": {
      "post": {
        "summary": "Create category store",
        "description": "Create category store",
        "produces": ["application/json"],
        "tags": ["Web/Admin/CategoriesStore"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "CreateParams",
            "description": "POST params for create category store",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryStoreParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly created category store object",
            "schema": {
              "title": "CategoryStoreResponse",
              "type": "object",
              "$ref": "#/definitions/CategoryStoreResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/categoriesstore/filter": {
      "post": {
        "summary": "Search Categories store",
        "description": "Search Categories store",
        "produces": ["application/json"],
        "tags": ["Web/Admin/CategoriesStore"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "SearchParams",
            "description": "POST params search",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchCategoriesStoreParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "FilterCategoryStoreResponse",
              "type": "object",
              "$ref": "#/definitions/FilterCategoryStoreResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/clients": {
      "post": {
        "summary": "Application for registration",
        "description": "Application for registration",
        "produces": ["application/json"],
        "tags": ["Clients"],
        "parameters": [
          {
            "name": "ClientParams",
            "description": "POST params for a client",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewClient"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly created client object",
            "schema": {
              "title": "Commerce",
              "type": "object",
              "$ref": "#/definitions/Client"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/clients/ic": {
      "get": {
        "summary": "Get status connect infinitumCard of user",
        "description": "Returns status",
        "produces": ["application/json"],
        "tags": ["Clients"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Status",
            "schema": {
              "title": "Status",
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "description": "Status of connect"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update status connect infinitumCard of user",
        "description": "Returns status",
        "produces": ["application/json"],
        "tags": ["Clients"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "UpdateParams",
            "description": "POST params for update status",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ICstatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status",
            "schema": {
              "title": "Status",
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "description": "Status of connect"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create IC connect request of user",
        "description": "Returns status",
        "produces": ["application/json"],
        "tags": ["Clients"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "CreateParams",
            "description": "POST params for create IC connect",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ICrequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status",
            "schema": {
              "title": "Status",
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "description": "Status of connect"
                }
              }
            }
          }
        }
      }
    },
    "/commerces/stores/filter": {
      "post": {
        "summary": "Search Stores enabled of commerce",
        "description": "Search Stores",
        "produces": ["application/json"],
        "tags": ["Commerces"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "StoresParams",
            "description": "POST params search",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchStores"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "SearchStoresResponse",
              "type": "object",
              "$ref": "#/definitions/SearchStoresResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/commerces": {
      "get": {
        "summary": "Show user information",
        "description": "Request info about user",
        "produces": ["application/json"],
        "tags": ["Web/Commerces"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User response",
            "schema": {
              "title": "UserDetailsParseResponse",
              "$ref": "#/definitions/UserDetailsParseResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "post": {
        "summary": "Register commerce user",
        "description": "Register user",
        "produces": ["application/json"],
        "tags": ["Web/Commerces"],
        "parameters": [
          {
            "name": "CreateParams",
            "description": "POST params to register",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "RegisterResponse",
              "type": "object",
              "$ref": "#/definitions/RegisterResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "put": {
        "summary": "Update user",
        "description": "Update user",
        "produces": ["application/json"],
        "tags": ["Web/Commerces"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "UpdateParams",
            "description": "POST params for update user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserDetailsParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "update user object",
            "schema": {
              "title": "User",
              "type": "object",
              "$ref": "#/definitions/UserDetailsParseResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/commerces/{id}": {
      "get": {
        "summary": "Show user information by id",
        "description": "Request info about user",
        "produces": ["application/json"],
        "tags": ["Web/Commerces"],
        "parameters": [
          {
            "name": "id",
            "description": "Unique identifier of user",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "User response",
            "schema": {
              "title": "UserDetailsParseResponse",
              "$ref": "#/definitions/UserDetailsParseResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/commerces/me/status": {
      "get": {
        "summary": "Show user status",
        "description": "Request info about user",
        "produces": ["application/json"],
        "tags": ["Web/Commerces"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Status",
            "schema": {
              "title": "status",
              "type": "object",
              "properties": {
                "phoneStatus": {
                  "type": "boolean",
                  "description": "mobile verified"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/commerces": {
      "get": {
        "summary": "Show user information",
        "description": "Request info about user",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Commerces"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User response",
            "schema": {
              "title": "UserDetailsParseResponse",
              "$ref": "#/definitions/UserDetailsParseResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "put": {
        "summary": "Update user",
        "description": "Update user",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Commerces"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "UpdateParams",
            "description": "POST params for update user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserDetailsParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "update user object",
            "schema": {
              "title": "User",
              "type": "object",
              "$ref": "#/definitions/UserDetailsParseResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/commissions/{id}": {
      "get": {
        "summary": "Show commission",
        "description": "Request info about commission",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Commissions"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "commissionId",
            "description": "Unique identifier of commission",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Comission response",
            "schema": {
              "title": "CommissionResponse",
              "$ref": "#/definitions/CommissionResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/commissions": {
      "post": {
        "summary": "Create commission",
        "description": "Create commission",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Commissions"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "CreateParams",
            "description": "POST params for create commission",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommissionParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly created commission object",
            "schema": {
              "title": "CommissionResponse",
              "type": "object",
              "$ref": "#/definitions/CommissionResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/commissions/filter": {
      "post": {
        "summary": "Search commissions",
        "description": "Search commissions",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Commissions"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "SearchCommissionsParams",
            "description": "POST params search",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchCommissionsParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "FilterCommissionResponse",
              "type": "object",
              "$ref": "#/definitions/FilterCommissionResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/commissions/cryptocurrency/{id}": {
      "get": {
        "summary": "Show commission by cryptocurrency id",
        "description": "Request info about commission",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Commissions"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Unique identifier of cryptocurrency",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Comission response",
            "schema": {
              "title": "CommissionResponse",
              "$ref": "#/definitions/CommissionResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/currency/cryptocurrency/available": {
      "get": {
        "summary": "List all actived cryptocurrencies for user",
        "description": "Returns cryptocurrencies",
        "produces": ["application/json"],
        "tags": ["Currency"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "ListCryptoCurrencyResponse",
              "type": "object",
              "$ref": "#/definitions/ListCryptoCurrencyResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/currency/fiatcurrency": {
      "get": {
        "summary": "List all actived fiatcurrencies",
        "description": "Returns fiatcurrencies",
        "produces": ["application/json"],
        "tags": ["Currency"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "ListFiatCurrencyResponse",
              "type": "object",
              "$ref": "#/definitions/ListFiatCurrencyResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/currency/cryptocurrency": {
      "get": {
        "summary": "List all actived cryptocurrencies",
        "description": "Returns cryptocurrencies",
        "produces": ["application/json"],
        "tags": ["Web/Currency"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "ListCryptoCurrencyResponse",
              "type": "object",
              "$ref": "#/definitions/ListCryptoCurrencyResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/currency/fiat/{id}": {
      "get": {
        "summary": "Show fiatcurrency",
        "description": "Request info about fiatcurrency",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Currency"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Unique identifier of fiatcurrency",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Fiatcurrency response",
            "schema": {
              "title": "FiatCurrencyResponse",
              "$ref": "#/definitions/FiatCurrencyResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "put": {
        "summary": "Update fiatcurrency",
        "description": "Update fiatcurrency",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Currency"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Unique identifier of the fiatcurrency",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "UpdateParams",
            "description": "POST params for update fiatcurrency",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FiatCurrencyParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fiatcurrency response",
            "schema": {
              "title": "FiatCurrencyResponse",
              "$ref": "#/definitions/FiatCurrencyResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/currency/fiat": {
      "post": {
        "summary": "Create fiatcurrency",
        "description": "Create fiatcurrency",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Currency"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "CreateParams",
            "description": "POST params for create fiatcurrency",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FiatCurrencyParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly created fiatcurrency object",
            "schema": {
              "title": "FiatCurrencyResponse",
              "type": "object",
              "$ref": "#/definitions/FiatCurrencyResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/currency/fiat/filter": {
      "post": {
        "summary": "Search fiatcurrencies",
        "description": "Search fiatcurrencies",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Currency"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "SearchParams",
            "description": "POST params search",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchFiatCurrenciesParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "FilterFiatCurrencyResponse",
              "type": "object",
              "$ref": "#/definitions/FilterFiatCurrencyResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/currency/crypto/{id}": {
      "get": {
        "summary": "Show cryptocurrency",
        "description": "Request info about cryptocurrency",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Currency"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Unique identifier of cryptocurrency",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Cryptocurrency response",
            "schema": {
              "title": "CryptoCurrencyResponse",
              "$ref": "#/definitions/CryptoCurrencyResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "put": {
        "summary": "Update cryptocurrency",
        "description": "Update cryptocurrency",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Currency"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Unique identifier of the cryptocurrency",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "UpdateParams",
            "description": "POST params for update cryptocurrency",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CryptoCurrencyParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cryptocurrency response",
            "schema": {
              "title": "CryptoCurrencyResponse",
              "$ref": "#/definitions/CryptoCurrencyResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/currency/crypto": {
      "get": {
        "summary": "List all cryptocurrencies",
        "description": "Returns cryptocurrencies",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Currency"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "ListCryptoCurrencyResponse",
              "type": "object",
              "$ref": "#/definitions/ListCryptoCurrencyResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "post": {
        "summary": "Create cryptocurrency",
        "description": "Create cryptocurrency",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Currency"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "CreateParams",
            "description": "POST params for create cryptocurrency",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CryptoCurrencyParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly created cryptocurrency object",
            "schema": {
              "title": "CryptoCurrencyResponse",
              "type": "object",
              "$ref": "#/definitions/CryptoCurrencyResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/currency/crypto/filter": {
      "post": {
        "summary": "Search cryptocurrencies",
        "description": "Search cryptocurrencies",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Currency"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "SearchParams",
            "description": "POST params search",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchCryptoCurrenciesParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "FilterCryptoCurrencyResponse",
              "type": "object",
              "$ref": "#/definitions/FilterCryptoCurrencyResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/devices/client/link/resend": {
      "get": {
        "summary": "Resend verify code",
        "description": "Request for resend verify code by sms",
        "produces": ["application/json"],
        "tags": ["Devices"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Verify code resend",
            "schema": {
              "title": "deviceResend",
              "type": "object",
              "$ref": "#/definitions/DeviceClientRequest"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/devices/client/active": {
      "post": {
        "summary": "Active a client device",
        "description": "Request for active device for client user",
        "produces": ["application/json"],
        "tags": ["Devices"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "ActiveClientParams",
            "description": "Params required for active device",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActiveClientParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Device active",
            "schema": {
              "title": "deviceActive",
              "type": "object",
              "$ref": "#/definitions/DeviceClientRequest"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/devices/commerce/link": {
      "post": {
        "summary": "Link a store device",
        "description": "Request for link a store device",
        "produces": ["application/json"],
        "tags": ["Devices"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "LinkStoreParams",
            "description": "Params required for link device",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LinkStoreParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Device link",
            "schema": {
              "title": "deviceLink",
              "type": "object",
              "$ref": "#/definitions/DeviceStoreRequest"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/devices/commerce/link/resend": {
      "post": {
        "summary": "Resend verify code",
        "description": "Request for active device for user",
        "produces": ["application/json"],
        "tags": ["Devices"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "ResendLinkStoreParams",
            "description": "Params required for resend link device",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResendLinkStoreParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Verify code resend",
            "schema": {
              "title": "deviceResend",
              "type": "object",
              "$ref": "#/definitions/DeviceStoreRequest"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/devices/commerce/active": {
      "post": {
        "summary": "Active a device",
        "description": "Request for resend verify code by sms",
        "produces": ["application/json"],
        "tags": ["Devices"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "ActiveStoreParams",
            "description": "Params required for active device",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActiveStoreParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Device active",
            "schema": {
              "title": "deviceResend",
              "type": "object",
              "$ref": "#/definitions/DeviceStoreRequest"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/devices/language": {
      "post": {
        "summary": "Change default language of device",
        "description": "Change default language of device",
        "produces": ["application/json"],
        "tags": ["Devices"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "ChangeLanguage",
            "description": "Params required for change default language",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeLanguage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default language updated",
            "schema": {
              "title": "changeLanguage",
              "type": "object",
              "$ref": "#/definitions/DeviceStoreRequest"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/devices/onesignalid": {
      "post": {
        "summary": "Edit default onesignalid of device",
        "description": "Edit default onesignalid of device",
        "produces": ["application/json"],
        "tags": ["Devices"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "ChangeOneSignalId",
            "description": "Params required for change default onesignalid",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeOneSignalId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default One Signal Id updated",
            "schema": {
              "title": "Device",
              "type": "object",
              "$ref": "#/definitions/Device"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/devices": {
      "get": {
        "summary": "List all devices",
        "description": "Returns devices",
        "produces": ["application/json"],
        "tags": ["Web/Devices"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "ListDevicesResponse",
              "type": "object",
              "$ref": "#/definitions/ListDevicesResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/devices/{id}": {
      "get": {
        "summary": "Get a device",
        "description": "Get device information",
        "produces": ["application/json"],
        "tags": ["Web/Devices"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Unique identifier of the device",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Device object",
            "schema": {
              "title": "Device",
              "type": "object",
              "$ref": "#/definitions/Device"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a device",
        "description": "Delete a device",
        "produces": ["application/json"],
        "tags": ["Web/Devices"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Unique identifier of the device",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Device deleted (no-content)"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": null,
            "$ref": "#/definitions/ServerError"
          }
        }
      }
    },
    "/web/devices/filter": {
      "post": {
        "summary": "Search Devices",
        "description": "Search Devices",
        "produces": ["application/json"],
        "tags": ["Web/Devices"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "DevicesParams",
            "description": "POST params search",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchDevices"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "SearchDevicesResponse",
              "type": "object",
              "$ref": "#/definitions/SearchDevicesResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/devices/onesignalid": {
      "post": {
        "summary": "Edit default onesignalid of device",
        "description": "Edit default onesignalid of device",
        "produces": ["application/json"],
        "tags": ["Web/Devices"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "ChangeOneSignalId",
            "description": "Params required for change default onesignalid",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeOneSignalId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default One Signal Id updated",
            "schema": {
              "title": "Device",
              "type": "object",
              "$ref": "#/definitions/Device"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/infinite/countries": {
      "get": {
        "summary": "List all active countries",
        "description": "Returns countries",
        "produces": ["application/json"],
        "tags": ["Web/Infinite"],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "ListCountriesResponse",
              "type": "object",
              "$ref": "#/definitions/ListCountriesResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/infinite/states/{countryId}": {
      "get": {
        "summary": "List all active states for a country",
        "description": "Returns states",
        "produces": ["application/json"],
        "tags": ["Web/Infinite"],
        "parameters": [
          {
            "name": "countryId",
            "description": "Unique identifier of the country",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "ListStatesResponse",
              "type": "object",
              "$ref": "#/definitions/ListStatesResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/infinite/countries": {
      "get": {
        "summary": "List all active countries",
        "description": "Returns countries",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Infinite"],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "ListCountriesResponse",
              "type": "object",
              "$ref": "#/definitions/ListCountriesResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/infinite/states/{countryId}": {
      "get": {
        "summary": "List all active states for a country",
        "description": "Returns states",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Infinite"],
        "parameters": [
          {
            "name": "countryId",
            "description": "Unique identifier of the country",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "ListStatesResponse",
              "type": "object",
              "$ref": "#/definitions/ListStatesResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/password/request/{deviceId}": {
      "get": {
        "summary": "Request a reset password",
        "description": "Do a request to reset password for a user",
        "produces": ["application/json"],
        "tags": ["Password"],
        "parameters": [
          {
            "name": "deviceId",
            "description": "Device id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfully",
            "schema": {
              "title": "succesfully",
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Succesfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/password/reset/change": {
      "post": {
        "summary": "Complete a reset password",
        "description": "Complete a request to reset password for a user",
        "produces": ["application/json"],
        "tags": ["Password"],
        "parameters": [
          {
            "name": "ResetChangeClientPasswordParams",
            "description": "Params required for a password reset change",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetChangeClientPasswordParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update client object",
            "schema": {
              "title": "Client",
              "type": "object",
              "$ref": "#/definitions/Client"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/password/change": {
      "post": {
        "summary": "Change password",
        "description": "Change password for logged user",
        "produces": ["application/json"],
        "tags": ["Password"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "NewPasswordParams",
            "description": "Params required for a password change",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewPasswordParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update client object",
            "schema": {
              "title": "Client",
              "type": "object",
              "$ref": "#/definitions/Client"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/password/request": {
      "post": {
        "summary": "Request a reset password",
        "description": "Do a request to reset password for a user",
        "produces": ["application/json"],
        "tags": ["Web/Password"],
        "parameters": [
          {
            "name": "ResetWebPasswordParams",
            "description": "Params required for a password reset",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetWebPasswordParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfully",
            "schema": {
              "title": "succesfully",
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Succesfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/password/reset/change": {
      "post": {
        "summary": "Complete a reset password",
        "description": "Complete a request to reset password for a user",
        "produces": ["application/json"],
        "tags": ["Web/Password"],
        "parameters": [
          {
            "name": "ResetChangeCommercePasswordParams",
            "description": "Params required for a password reset change",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetChangeCommercePasswordParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update login user object",
            "schema": {
              "title": "LoginUser",
              "type": "object",
              "$ref": "#/definitions/LoginUserResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/password/change": {
      "post": {
        "summary": "Change password",
        "description": "Change password for logged user",
        "produces": ["application/json"],
        "tags": ["Web/Password"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "PasswordParams",
            "description": "Params required for a password change",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update user object",
            "schema": {
              "title": "User",
              "type": "object",
              "$ref": "#/definitions/UserDetailsParseResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/password/request": {
      "post": {
        "summary": "Request a reset password",
        "description": "Do a request to reset password for a user",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Password"],
        "parameters": [
          {
            "name": "ResetWebPasswordParams",
            "description": "Params required for a password reset",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetWebPasswordParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfully",
            "schema": {
              "title": "succesfully",
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Succesfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/password/reset/change": {
      "post": {
        "summary": "Complete a reset password",
        "description": "Complete a request to reset password for a user",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Password"],
        "parameters": [
          {
            "name": "ResetChangeCommercePasswordParams",
            "description": "Params required for a password reset change",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetChangeCommercePasswordParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update login user object",
            "schema": {
              "title": "LoginUser",
              "type": "object",
              "$ref": "#/definitions/LoginUserResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/password/change": {
      "post": {
        "summary": "Change password",
        "description": "Change password for logged user",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Password"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "PasswordParams",
            "description": "Params required for a password change",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update user object",
            "schema": {
              "title": "User",
              "type": "object",
              "$ref": "#/definitions/UserDetailsParseResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/ranks/{id}": {
      "get": {
        "summary": "Show rank",
        "description": "Request info about rank",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Ranks"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Unique identifier of rank",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Rank response",
            "schema": {
              "title": "RankResponse",
              "$ref": "#/definitions/RankResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "put": {
        "summary": "Update rank",
        "description": "Update rank",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Ranks"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Unique identifier of the rank",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "UpdateParams",
            "description": "POST params for update rank",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RankParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rank response",
            "schema": {
              "title": "RankResponse",
              "$ref": "#/definitions/RankResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/ranks": {
      "post": {
        "summary": "Create rank",
        "description": "Create rank",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Ranks"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "CreateParams",
            "description": "POST params for create rank",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RankParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly created rank object",
            "schema": {
              "title": "RankResponse",
              "type": "object",
              "$ref": "#/definitions/RankResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/ranks/filter": {
      "post": {
        "summary": "Search Ranks",
        "description": "Search Ranks",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Ranks"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "SearchParams",
            "description": "POST params search",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchRanksParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "FilterRankResponse",
              "type": "object",
              "$ref": "#/definitions/FilterRankResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/report/transactions/buysell": {
      "get": {
        "summary": "List data of monthly sales",
        "description": "Returns data",
        "produces": ["application/json"],
        "tags": ["Web/Report"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "ListReportDataBuySellResponse",
              "type": "object",
              "$ref": "#/definitions/ListReportDataBuySellResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/report/wallets": {
      "get": {
        "summary": "List data of wallets",
        "description": "Returns data",
        "produces": ["application/json"],
        "tags": ["Web/Report"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "ListReportDataWalletsResponse",
              "type": "object",
              "$ref": "#/definitions/ListReportDataWalletsResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/stores": {
      "get": {
        "summary": "List all stores",
        "description": "Returns stores",
        "produces": ["application/json"],
        "tags": ["Web/Stores"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "ListStoresResponse",
              "type": "object",
              "$ref": "#/definitions/ListStoresResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new store",
        "description": "Create an store",
        "produces": ["application/json"],
        "tags": ["Web/Stores"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "StoreParams",
            "description": "POST params for an store",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewStore"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly created store object",
            "schema": {
              "title": "Store",
              "type": "object",
              "$ref": "#/definitions/Store"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/stores/{id}": {
      "get": {
        "summary": "Get a store",
        "description": "Get store information",
        "produces": ["application/json"],
        "tags": ["Web/Stores"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Unique identifier of the store",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Store object",
            "schema": {
              "title": "Store",
              "type": "object",
              "$ref": "#/definitions/Store"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "put": {
        "summary": "Update a store",
        "description": "Update an store",
        "produces": ["application/json"],
        "tags": ["Web/Stores"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Unique identifier of the store",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "StoreParams",
            "description": "PUT params for an storer",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewStore"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Store object",
            "schema": {
              "title": "Store",
              "type": "object",
              "$ref": "#/definitions/Store"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a store",
        "description": "Delete a store",
        "produces": ["application/json"],
        "tags": ["Web/Stores"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Unique identifier of the store",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Store deleted (no-content)"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": null,
            "$ref": "#/definitions/ServerError"
          }
        }
      }
    },
    "/web/stores/filter": {
      "post": {
        "summary": "Search Stores",
        "description": "Search Stores",
        "produces": ["application/json"],
        "tags": ["Web/Stores"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "StoresParams",
            "description": "POST params search",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchStores"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "SearchStoresResponse",
              "type": "object",
              "$ref": "#/definitions/SearchStoresResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/transactions": {
      "post": {
        "summary": "generate transactions",
        "description": "generate transactions",
        "produces": ["application/json"],
        "tags": ["Transactions"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "TransactionsParams",
            "description": "POST params generate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionBuy"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Object",
            "schema": {
              "title": "TransactionBuyResponse",
              "type": "object",
              "$ref": "#/definitions/TransactionBuyResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/transactions/pay": {
      "post": {
        "summary": "pay transactions",
        "description": "pay transactions",
        "produces": ["application/json"],
        "tags": ["Transactions"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "TransactionsParams",
            "description": "POST params pay",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionPay"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "TransactionBuyResponse",
              "type": "object",
              "$ref": "#/definitions/TransactionBuyResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/transactions/{idtransaction}": {
      "get": {
        "summary": "Show Transaction",
        "description": "Request info about Transaction",
        "produces": ["application/json"],
        "tags": ["Transactions"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "idtransaction",
            "description": "Unique identifier of Transaction",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction response",
            "schema": {
              "title": "TransactionResponse",
              "$ref": "#/definitions/TransactionResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "Transaction not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "put": {
        "summary": "Update a transaction",
        "description": "Update a transaction",
        "produces": ["application/json"],
        "tags": ["Transactions"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Unique identifier of the transaction",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "TransactionParams",
            "description": "PUT params for an commerce",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EditTransaction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction response",
            "schema": {
              "title": "TransactionResponse",
              "$ref": "#/definitions/TransactionResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/transactions/filter": {
      "post": {
        "summary": "Search Transactions",
        "description": "Search Transactions",
        "produces": ["application/json"],
        "tags": ["Transactions"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "TransactionsParams",
            "description": "POST params search",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "SearchTransactionsResponse",
              "type": "object",
              "$ref": "#/definitions/SearchTransactionsResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/transactions/deposit": {
      "post": {
        "summary": "generate transactions deposit",
        "description": "generate transactions deposit",
        "produces": ["application/json"],
        "tags": ["Transactions"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "TransactionsParams",
            "description": "POST params generate deposit",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionDeposit"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Object",
            "schema": {
              "title": "TransactionDepositResponse",
              "type": "object",
              "$ref": "#/definitions/TransactionDepositResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/transactions/withdraw": {
      "post": {
        "summary": "generate transactions withdraw",
        "description": "generate transactions withdraw",
        "produces": ["application/json"],
        "tags": ["Transactions"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "TransactionsParams",
            "description": "POST params generate withdraw",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionWithdraw"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Object",
            "schema": {
              "title": "TransactionWithdrawResponse",
              "type": "object",
              "$ref": "#/definitions/TransactionWithdrawResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/transactions/refund": {
      "post": {
        "summary": "generate refund transactions",
        "description": "generate refund transactions",
        "produces": ["application/json"],
        "tags": ["Transactions"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "TransactionsParams",
            "description": "POST params generate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionRefund"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Object",
            "schema": {
              "title": "TransactionBuyResponse",
              "type": "object",
              "$ref": "#/definitions/TransactionBuyResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/transactions/cancel": {
      "post": {
        "summary": "Cancel transaction",
        "description": "Cancel transaction",
        "produces": ["application/json"],
        "tags": ["Transactions"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "TransactionsParams",
            "description": "POST params generate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionPay"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Object",
            "schema": {
              "title": "TransactionResponse",
              "type": "object",
              "$ref": "#/definitions/TransactionResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/transactions/{id}": {
      "get": {
        "summary": "Show Transaction",
        "description": "Request info about Transaction",
        "produces": ["application/json"],
        "tags": ["Web/Transactions"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "idtransaction",
            "description": "Unique identifier of Transaction",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction response",
            "schema": {
              "title": "TransactionResponse",
              "$ref": "#/definitions/TransactionResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/transactions/filter": {
      "post": {
        "summary": "Search Transactions",
        "description": "Search Transactions",
        "produces": ["application/json"],
        "tags": ["Web/Transactions"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "TransactionWebFilter",
            "description": "POST params search",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionWebFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "SearchTransactionsResponse",
              "type": "object",
              "$ref": "#/definitions/SearchTransactionsResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/transactions/deposit": {
      "post": {
        "summary": "generate transactions deposit",
        "description": "generate transactions deposit",
        "produces": ["application/json"],
        "tags": ["Web/Transactions"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "TransactionsParams",
            "description": "POST params generate deposit",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionDeposit"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Object",
            "schema": {
              "title": "TransactionDepositResponse",
              "type": "object",
              "$ref": "#/definitions/TransactionDepositResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/transactions/withdraw": {
      "post": {
        "summary": "generate transactions withdraw",
        "description": "generate transactions withdraw",
        "produces": ["application/json"],
        "tags": ["Web/Transactions"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "TransactionsParams",
            "description": "POST params generate withdraw",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionWithdraw"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Object",
            "schema": {
              "title": "TransactionWithdrawResponse",
              "type": "object",
              "$ref": "#/definitions/TransactionWithdrawResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/transactions/cancel": {
      "post": {
        "summary": "Cancel transaction",
        "description": "Cancel transaction",
        "produces": ["application/json"],
        "tags": ["Web/Transactions"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "TransactionsParams",
            "description": "POST params generate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionPay"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Object",
            "schema": {
              "title": "TransactionResponse",
              "type": "object",
              "$ref": "#/definitions/TransactionResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/twofactor/generate": {
      "get": {
        "summary": "Return status for 2fa",
        "description": "Return status for 2fa from logged user, if status is false, this method generate 2fa seed",
        "produces": ["application/json"],
        "tags": ["Web/Two-factor authentication"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Return status and 2fa seed",
            "schema": {
              "title": "status",
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "description": "2fa status"
                },
                "tfaseed": {
                  "type": "onject",
                  "description": "2fa seed object",
                  "schema": {
                    "$ref": "#/definitions/SeedObject"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/twofactor/verify": {
      "post": {
        "summary": "Verify 2fa",
        "description": "Verify and enable 2fa for logged user",
        "produces": ["application/json"],
        "tags": ["Web/Two-factor authentication"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "2faParams",
            "description": "Params required for a 2fa verification",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/2faParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Verified",
            "schema": {
              "title": "verified",
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Verified"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "2fa not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/twofactor/generate": {
      "get": {
        "summary": "Return status for 2fa",
        "description": "Return status for 2fa from logged user, if status is false, this method generate 2fa seed",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Two-factor authentication"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Return status and 2fa seed",
            "schema": {
              "title": "status",
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "description": "2fa status"
                },
                "tfaseed": {
                  "type": "onject",
                  "description": "2fa seed object",
                  "schema": {
                    "$ref": "#/definitions/SeedObject"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/admin/twofactor/verify": {
      "post": {
        "summary": "Verify 2fa",
        "description": "Verify and enable 2fa for logged user",
        "produces": ["application/json"],
        "tags": ["Web/Admin/Two-factor authentication"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "2faParams",
            "description": "Params required for a 2fa verification",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/2faParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Verified",
            "schema": {
              "title": "verified",
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Verified"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "2fa not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/verify/email/{token}/{emailhash}": {
      "get": {
        "summary": "Verify an user account",
        "description": "Verify an user account and activate",
        "produces": ["application/json"],
        "tags": ["Web/Verify"],
        "parameters": [
          {
            "name": "token",
            "description": "Token valid for confirming email",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "emailhash",
            "description": "Hash valid for confirming email",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "RegisterResponse",
              "type": "object",
              "$ref": "#/definitions/RegisterResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/verify/phone": {
      "post": {
        "summary": "Verify account by sms code",
        "description": "Verify account by sms code",
        "produces": ["application/json"],
        "tags": ["Web/Verify"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "PostParams",
            "description": "POST params for verify account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerifyPhoneParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status",
            "schema": {
              "title": "status",
              "type": "object",
              "properties": {
                "phoneStatus": {
                  "type": "boolean",
                  "description": "mobile verified"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/verify/resend/phone": {
      "get": {
        "summary": "Resend sms verification",
        "description": "Resend sms for phone verification",
        "produces": ["application/json"],
        "tags": ["Web/Verify"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Sms code Resend",
            "schema": {
              "title": "Verify phone",
              "type": "object",
              "schema": {
                "title": "smsCodeResend",
                "type": "object",
                "$ref": "#/definitions/Phone"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/wallets": {
      "get": {
        "summary": "List wallets",
        "description": "List wallets",
        "produces": ["application/json"],
        "tags": ["Wallets"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "Wallets",
              "type": "object",
              "$ref": "#/definitions/Wallets"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "post": {
        "summary": "Create wallet",
        "description": "Create wallet",
        "produces": ["application/json"],
        "tags": ["Wallets"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "CreateParams",
            "description": "POST params for create wallet",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateWallets"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly created wallet object",
            "schema": {
              "title": "Wallet",
              "type": "object",
              "$ref": "#/definitions/CreateWalletsResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "put": {
        "summary": "Update wallet",
        "description": "Update wallet",
        "produces": ["application/json"],
        "tags": ["Wallets"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "UpdateParams",
            "description": "POST params for update wallet",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateWallets"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "update wallet object",
            "schema": {
              "title": "Wallet",
              "type": "object",
              "$ref": "#/definitions/UpdateWalletsResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/wallets/{walletId}": {
      "get": {
        "summary": "Show wallet",
        "description": "Request info about wallet",
        "produces": ["application/json"],
        "tags": ["Wallets"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "walletId",
            "description": "Unique identifier of wallet",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Wallet response",
            "schema": {
              "title": "WalletResponse",
              "$ref": "#/definitions/WalletResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "Wallet not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/wallets/commision/{walletId}": {
      "get": {
        "summary": "Wallet commission",
        "description": "Wallet commission",
        "produces": ["application/json"],
        "tags": ["Wallets"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "walletId",
            "description": "Unique identifier of wallet",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "CommissionResponse",
              "type": "object",
              "$ref": "#/definitions/CommissionResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/wallets": {
      "get": {
        "summary": "List wallets",
        "description": "List wallets",
        "produces": ["application/json"],
        "tags": ["Web/Wallets"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Object",
            "schema": {
              "title": "ListWalletsResponse",
              "type": "object",
              "$ref": "#/definitions/ListWalletsResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "post": {
        "summary": "Create wallet",
        "description": "Create wallet",
        "produces": ["application/json"],
        "tags": ["Web/Wallets"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "CreateParams",
            "description": "POST params for create wallet",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateWallets"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly created wallet object",
            "schema": {
              "title": "Wallet",
              "type": "object",
              "$ref": "#/definitions/CreateWalletsResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "put": {
        "summary": "Update wallet",
        "description": "Update wallet",
        "produces": ["application/json"],
        "tags": ["Web/Wallets"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "UpdateParams",
            "description": "POST params for update wallet",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateWallets"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "update wallet object",
            "schema": {
              "title": "Wallet",
              "type": "object",
              "$ref": "#/definitions/UpdateWalletsResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/web/wallets/{id}": {
      "get": {
        "summary": "Show wallet",
        "description": "Request info about wallet",
        "produces": ["application/json"],
        "tags": ["Web/Wallets"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "walletId",
            "description": "Unique identifier of wallet",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Wallet response",
            "schema": {
              "title": "WalletResponse",
              "$ref": "#/definitions/WalletResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "Wallet not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/webhook": {
      "post": {
        "summary": "Create call to webhook",
        "description": "Create call to webhook",
        "produces": ["application/json"],
        "tags": ["Webhook"],
        "parameters": [
          {
            "name": "CreateParams",
            "description": "POST params for create webhook",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfully",
            "schema": {
              "title": "succesfully",
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "description": "Succesfully",
                  "enum": ["OK"]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "App": {
      "title": "App",
      "type": "object",
      "properties": {
        "app": {
          "type": "string"
        },
        "apiVersion": {
          "type": "string"
        }
      }
    },
    "Token": {
      "title": "Token",
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "description": "Token valid for user loged"
        },
        "expires_in": {
          "type": "string",
          "description": "Token expires in"
        },
        "token_type": {
          "type": "string",
          "description": "Token type"
        },
        "refresh_token": {
          "type": "string",
          "description": "Refresh token valid for user loged"
        }
      }
    },
    "TokenNoRef": {
      "title": "Token",
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string",
          "description": "Token valid for user loged"
        },
        "expiresIn": {
          "type": "string",
          "description": "Token expires in"
        },
        "tokenType": {
          "type": "string",
          "description": "Token type"
        }
      }
    },
    "Login": {
      "title": "Login from web",
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "description": "Username of the user",
          "maxLength": 100
        },
        "password": {
          "type": "string",
          "description": "Password of the user",
          "maxLength": 50
        }
      },
      "required": ["user", "password"]
    },
    "LoginCommerce": {
      "title": "Login from commerce app",
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "description": "Username of the user",
          "maxLength": 100
        },
        "mobile": {
          "type": "string",
          "description": "Password of the user",
          "maxLength": 250
        },
        "deviceId": {
          "type": "string",
          "description": "Identifier of device",
          "maxLength": 255
        },
        "language": {
          "type": "string",
          "description": "Language of user",
          "minLength": 2,
          "maxLength": 2
        }
      },
      "required": ["user", "mobile", "deviceId"]
    },
    "LoginClient": {
      "title": "Login from client app",
      "type": "object",
      "properties": {
        "phoneCode": {
          "type": "string",
          "description": "Phone user country code",
          "maxLength": 10
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone of the user",
          "maxLength": 20
        },
        "password": {
          "type": "string",
          "description": "Password of the user",
          "maxLength": 255
        },
        "deviceId": {
          "type": "string",
          "description": "Device ID",
          "maxLength": 255
        },
        "language": {
          "type": "string",
          "description": "Language of user",
          "minLength": 2,
          "maxLength": 2
        }
      },
      "required": ["phoneCode", "phoneNumber", "password", "deviceId"]
    },
    "LoginStore": {
      "title": "Login from commerce app",
      "type": "object",
      "properties": {
        "storeId": {
          "type": "integer",
          "description": "Store ID"
        },
        "user": {
          "type": "string",
          "description": "Username of commerce",
          "maxLength": 100
        },
        "deviceId": {
          "type": "string",
          "description": "Device ID",
          "maxLength": 255
        }
      },
      "required": ["storeId", "user", "deviceId"]
    },
    "RefreshToken": {
      "title": "Token request with refresh token",
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string",
          "description": "Valid refresh token",
          "maxLength": 255
        }
      },
      "required": ["refreshToken"]
    },
    "RefreshCommerceToken": {
      "title": "Token request with refresh token",
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string",
          "description": "Valid refresh token",
          "maxLength": 255
        },
        "deviceId": {
          "type": "string",
          "description": "Id of device",
          "maxLength": 255
        },
        "language": {
          "type": "string",
          "description": "Default language of device",
          "minLength": 2,
          "maxLength": 2
        }
      },
      "required": ["refreshToken", "deviceId", "language"]
    },
    "RefreshClientToken": {
      "title": "Token request with refresh token",
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string",
          "description": "Valid refresh token",
          "maxLength": 255
        },
        "deviceId": {
          "type": "string",
          "description": "Id of device",
          "maxLength": 255
        }
      },
      "required": ["refreshToken", "deviceId"]
    },
    "RefreshStoreToken": {
      "title": "Token request with refresh token",
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string",
          "description": "Valid refresh token",
          "maxLength": 255
        },
        "deviceId": {
          "type": "string",
          "description": "Id of device",
          "maxLength": 255
        },
        "storeId": {
          "type": "integer",
          "description": "Id of store"
        }
      },
      "required": ["refreshToken", "storeId", "deviceId"]
    },
    "DeleteToken": {
      "title": "DeleteToken",
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string",
          "description": "Token valid for user new token requests"
        }
      }
    },
    "CategoryStoreResponse": {
      "title": "CategoryStoreResponse",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID"
        },
        "category": {
          "type": "string",
          "description": "Name of category"
        },
        "desc_min": {
          "type": "string",
          "description": "Minimum discount"
        },
        "desc_max": {
          "type": "string",
          "description": "Maximum discount"
        },
        "coms_min": {
          "type": "string",
          "description": "Minimum commission"
        },
        "coms_max": {
          "type": "string",
          "description": "Maximum commission"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Category Store creation datetime"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Category Store update datetime"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Category Store update datetime"
        }
      }
    },
    "ListCategoriesStoreResponse": {
      "title": "ListCategoriesStoreResponse",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "title": "Categories store",
            "type": "object",
            "$ref": "#/definitions/CategoryStoreResponse"
          }
        }
      }
    },
    "FilterCategoryStoreResponse": {
      "title": "FilterCategoryStoreResponse",
      "type": "object",
      "properties": {
        "pagination": {
          "type": "object",
          "description": "Pagination info",
          "$ref": "#/definitions/Pagination"
        },
        "categoriesStore": {
          "type": "array",
          "items": {
            "title": "Categories store",
            "type": "object",
            "$ref": "#/definitions/CategoryStoreResponse"
          }
        }
      }
    },
    "CategoryStoreParams": {
      "title": "CategoryStoreParams",
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "description": "Name of category",
          "maxLength": 255
        },
        "descMin": {
          "type": "string",
          "description": "Minimum discount",
          "pattern": "^100$|^\\d{0,2}(\\.\\d{1,2})? *%?$",
          "maxLength": 255
        },
        "descMax": {
          "type": "string",
          "description": "Maximum discount",
          "pattern": "^100$|^\\d{0,2}(\\.\\d{1,2})? *%?$",
          "maxLength": 255
        },
        "comsMin": {
          "type": "string",
          "description": "Minimum commission",
          "pattern": "^100$|^\\d{0,2}(\\.\\d{1,2})? *%?$",
          "maxLength": 255
        },
        "comsMax": {
          "type": "string",
          "description": "Maximum commission",
          "pattern": "^100$|^\\d{0,2}(\\.\\d{1,2})? *%?$",
          "maxLength": 255
        }
      },
      "required": ["category", "descMin", "descMax", "comsMin", "comsMax"]
    },
    "FilterCategoryStoreParams": {
      "title": "FilterCategoryStoreParams",
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "description": "Name of category",
          "nullable": true,
          "maxLength": 255
        }
      }
    },
    "SearchCategoriesStoreParams": {
      "title": "SearchCategoriesStoreParams",
      "type": "object",
      "properties": {
        "filter": {
          "type": "object",
          "description": "filter for search categories store",
          "$ref": "#/definitions/FilterCategoryStoreParams"
        },
        "page": {
          "type": "integer",
          "description": "current page",
          "minimum": 1
        },
        "pageSize": {
          "type": "integer",
          "description": "number of element for page",
          "minimum": 1
        },
        "sort": {
          "type": "string",
          "description": "sort list",
          "nullable": true,
          "enum": ["id", "category", "desc_min", "desc_max", "coms_min", "coms_max", "created_at"]
        },
        "order": {
          "type": "string",
          "description": "order by",
          "nullable": true,
          "enum": ["asc", "desc"]
        }
      },
      "required": ["filter", "page", "pageSize"]
    },
    "Client": {
      "title": "Client",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "description": "Id of the Client"
        },
        "phoneCode": {
          "type": "string",
          "description": "Phone user country code"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Number phone of the Client"
        },
        "status": {
          "type": "string",
          "description": "Status of the client"
        },
        "latitude": {
          "type": "string",
          "description": "Latitude of the client"
        },
        "longitude": {
          "type": "string",
          "description": "Longitude of the client"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Client creation datetime"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Client update datetime"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Client delete datetime"
        }
      }
    },
    "NewClient": {
      "title": "Client",
      "type": "object",
      "properties": {
        "phoneCode": {
          "type": "string",
          "description": "Phone client country code",
          "maxLength": 10
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone of the client",
          "maxLength": 20
        },
        "deviceId": {
          "type": "string",
          "description": "Device ID for the client",
          "maxLength": 255
        },
        "password": {
          "type": "string",
          "description": "Password for the client",
          "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?!.*\\s)(?=.*[^\\da-zA-Z]).{6,15}$",
          "maxLength": 255
        },
        "latitude": {
          "type": "string",
          "description": "Latitude of the client",
          "pattern": "^[+-]?\\d+(\\.\\d+)?$",
          "maxLength": 100
        },
        "longitude": {
          "type": "string",
          "description": "Longitude of the client",
          "pattern": "^[+-]?\\d+(\\.\\d+)?$",
          "maxLength": 100
        },
        "makeModel": {
          "type": "string",
          "description": "Latitude of the client",
          "nullable": true,
          "maxLength": 100
        },
        "serialNum": {
          "type": "string",
          "description": "Longitude of the client",
          "nullable": true,
          "maxLength": 150
        },
        "language": {
          "type": "string",
          "description": "Language of user",
          "minLength": 2,
          "maxLength": 2
        }
      },
      "required": ["phoneCode", "phoneNumber", "password", "deviceId", "latitude", "longitude", "language"]
    },
    "ICstatus": {
      "title": "ICstatus",
      "type": "object",
      "properties": {
        "emailIC": {
          "type": "string",
          "description": "email used for linked",
          "format": "email"
        },
        "status": {
          "type": "string",
          "description": "New status for request",
          "enum": ["pending", "success", "error"]
        }
      },
      "required": ["emailIC", "status"]
    },
    "ICrequest": {
      "title": "ICrequest",
      "type": "object",
      "properties": {
        "emailIC": {
          "type": "string",
          "description": "email used for linked",
          "format": "email"
        },
        "latitude": {
          "type": "string",
          "description": "latitude",
          "pattern": "^[+-]?\\d+(\\.\\d+)?$"
        },
        "longitude": {
          "type": "string",
          "description": "longitude",
          "pattern": "^[+-]?\\d+(\\.\\d+)?$"
        }
      },
      "required": ["emailIC", "latitude", "longitude"]
    },
    "UserDetailsParseResponse": {
      "title": "UserDetailsParseResponse",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of user"
        },
        "user_name": {
          "type": "string",
          "description": "user name"
        },
        "mobile": {
          "type": "string",
          "description": "mobile of user"
        },
        "email": {
          "type": "string",
          "description": "email of user"
        },
        "first_name": {
          "type": "string",
          "description": "first name of user"
        },
        "last_name": {
          "type": "string",
          "description": "last name of user"
        },
        "gender": {
          "type": "string",
          "description": "gender of user"
        },
        "date_of_birth": {
          "type": "string",
          "description": "date of birth of user"
        },
        "address": {
          "type": "string",
          "description": "address of user"
        },
        "pin": {
          "type": "string",
          "description": "Zipcode of user"
        },
        "tax_id": {
          "type": "string",
          "description": "user identifier"
        },
        "country": {
          "type": "string",
          "description": "country of user"
        },
        "state": {
          "type": "string",
          "description": "state of user"
        },
        "city": {
          "type": "string",
          "description": "city of user"
        },
        "land_line": {
          "type": "string",
          "description": "land line of user"
        },
        "comp_name": {
          "type": "string",
          "description": "company name of user"
        }
      }
    },
    "UserDetailsParams": {
      "title": "UserDetailsParams",
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "first name of user"
        },
        "last_name": {
          "type": "string",
          "description": "last name of user"
        },
        "gender": {
          "type": "string",
          "description": "gender of user"
        },
        "date_of_birth": {
          "type": "string",
          "description": "date of birth of user",
          "pattern": "\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{1,2}:\\d{1,2}"
        },
        "address": {
          "type": "string",
          "description": "address of user"
        },
        "pin": {
          "type": "string",
          "description": "zipcode of user"
        },
        "country": {
          "type": "string",
          "description": "country of user"
        },
        "state": {
          "type": "integer",
          "description": "state of user",
          "nullable": true
        },
        "city": {
          "type": "string",
          "description": "city of user"
        },
        "land_line": {
          "type": "string",
          "description": "land line of user",
          "nullable": true
        },
        "tax_id": {
          "type": "string",
          "description": "tax id of user"
        },
        "comp_name": {
          "type": "string",
          "description": "company name of user"
        }
      },
      "required": ["first_name", "last_name", "gender", "date_of_birth", "address", "pin", "country", "city", "tax_id", "comp_name"]
    },
    "RegisterResponse": {
      "title": "RegisterResponse",
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "description": "username of registered user"
        },
        "phone": {
          "type": "string",
          "description": "phone of registered user"
        },
        "id": {
          "type": "integer",
          "description": "unique identifier of registered user"
        },
        "encr_id": {
          "type": "integer",
          "description": "encrypted unique identifier of registered user"
        },
        "status": {
          "type": "string",
          "description": "status of registered user"
        },
        "tran": {
          "type": "string",
          "description": "transaction of registered user"
        },
        "email": {
          "type": "string",
          "description": "email of registered user"
        },
        "hash": {
          "type": "string",
          "description": "hash to confirm temporal registered user"
        }
      }
    },
    "RegisterParams": {
      "title": "RegisterParams",
      "type": "object",
      "properties": {
        "position": {
          "type": "integer",
          "description": "Position for register",
          "nullable": true
        },
        "pswd": {
          "type": "string",
          "description": "Password for register",
          "pattern": "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?!.*\\s).{8,15}$"
        },
        "confirm_pswd": {
          "type": "string",
          "description": "Confirm password for register",
          "maxLength": 255
        },
        "first_name": {
          "type": "string",
          "description": "First name for register"
        },
        "last_name": {
          "type": "string",
          "description": "Last name for register"
        },
        "gender": {
          "type": "string",
          "description": "Gender for register"
        },
        "date_of_birth": {
          "type": "string",
          "description": "Date of birth for register",
          "pattern": "\\d{4}-\\d{1,2}-\\d{1,2}"
        },
        "address": {
          "type": "string",
          "description": "Address for register"
        },
        "address_line2": {
          "type": "string",
          "description": "Address line 2 for register",
          "nullable": true
        },
        "pin": {
          "type": "string",
          "description": "Pin for register",
          "nullable": true
        },
        "tax_id": {
          "type": "string",
          "description": "Password for register"
        },
        "account_type": {
          "type": "string",
          "description": "account type for register"
        },
        "country": {
          "type": "string",
          "description": "country for register"
        },
        "state": {
          "type": "string",
          "description": "state for register",
          "nullable": true
        },
        "city": {
          "type": "string",
          "description": "city for register"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "email for register"
        },
        "confirm_email": {
          "type": "string",
          "format": "email",
          "description": "confirm email for register",
          "maxLength": 255
        },
        "mobile_code": {
          "type": "string",
          "description": "movile code for register",
          "nullable": true
        },
        "land_line": {
          "type": "string",
          "description": "land for register",
          "nullable": true
        },
        "mobile": {
          "type": "integer",
          "description": "mobile for register",
          "nullable": true
        },
        "comp_name": {
          "type": "string",
          "description": "company name for register",
          "nullable": true
        },
        "user_name_type": {
          "type": "string",
          "description": "User name type for register",
          "nullable": true
        },
        "user_name_entry": {
          "type": "string",
          "description": "User name entry for register"
        },
        "joining_date": {
          "type": "string",
          "description": "joining date for register",
          "pattern": "\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{1,2}:\\d{1,2}"
        },
        "sponsor_id": {
          "type": "integer",
          "description": "sponsor id for register"
        },
        "by_using": {
          "type": "string",
          "description": "by using for register",
          "nullable": true
        },
        "commerce": {
          "type": "boolean",
          "description": "is a commerce",
          "enum": [true]
        },
        "temporal": {
          "type": "boolean",
          "description": "is temporal",
          "enum": [true]
        }
      },
      "required": ["pswd", "confirm_pswd", "first_name", "last_name", "gender", "date_of_birth", "address", "country", "city", "email", "confirm_emails", "account_type", "tax_id", "sponsor_id", "commerce", "temporal"]
    },
    "CommissionResponse": {
      "title": "CommissionResponse",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID"
        },
        "status": {
          "type": "string",
          "description": "Status of commission"
        },
        "coms": {
          "type": "string",
          "description": "Commission"
        },
        "coms_min": {
          "type": "string",
          "description": "Minimum commission"
        },
        "cryptocurrency_id": {
          "type": "integer",
          "description": "Cryptocurrency id"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Commission creation datetime"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Commission update datetime"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Commission update datetime"
        }
      }
    },
    "CommissionParams": {
      "title": "CommissionsParams",
      "type": "object",
      "properties": {
        "coms": {
          "type": "string",
          "description": "commission",
          "pattern": "^100$|^\\d{0,2}(\\.\\d{1,2})? *%?$",
          "maxLength": 255
        },
        "comsMin": {
          "type": "string",
          "description": "Minimum commission",
          "pattern": "^\\d*\\.\\d{1,8}$",
          "maxLength": 255
        },
        "cryptocurrencyId": {
          "type": "integer",
          "description": "cryptocurrency id"
        }
      },
      "required": ["coms", "comsMin", "cryptocurrencyId"]
    },
    "FilterCommissionParams": {
      "title": "FilterCommissionParams",
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "status of commission",
          "nullable": true,
          "maxLength": 255,
          "enum": ["enabled", "disabled"]
        },
        "cryptocurrencyId": {
          "type": "integer",
          "description": "Name of category",
          "nullable": true
        }
      }
    },
    "SearchCommissionsParams": {
      "title": "SearchCommissionsParams",
      "type": "object",
      "properties": {
        "filter": {
          "type": "object",
          "description": "filter for search categories store",
          "$ref": "#/definitions/FilterCommissionParams"
        },
        "page": {
          "type": "integer",
          "description": "current page",
          "minimum": 1
        },
        "pageSize": {
          "type": "integer",
          "description": "number of element for page",
          "minimum": 1
        },
        "sort": {
          "type": "string",
          "description": "sort list",
          "nullable": true,
          "enum": ["id", "status", "coms", "coms_min", "cryptocurrency_id", "created_at"]
        },
        "order": {
          "type": "string",
          "description": "order by",
          "nullable": true,
          "enum": ["asc", "desc"]
        }
      },
      "required": ["filter", "page", "pageSize"]
    },
    "FilterCommissionResponse": {
      "title": "FilterCommissionResponse",
      "type": "object",
      "properties": {
        "pagination": {
          "type": "object",
          "description": "Pagination info",
          "$ref": "#/definitions/Pagination"
        },
        "categoriesStore": {
          "type": "array",
          "items": {
            "title": "CommissionResponse",
            "type": "object",
            "$ref": "#/definitions/CommissionResponse"
          }
        }
      }
    },
    "Error": {
      "title": "Error",
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ServerError": {
      "allOf": [
        {
          "$ref": "#/definitions/Error"
        },
        {
          "title": "ServerError"
        }
      ]
    },
    "NotFoundError": {
      "allOf": [
        {
          "$ref": "#/definitions/Error"
        },
        {
          "title": "NotFoundError"
        }
      ]
    },
    "Unauthorized": {
      "allOf": [
        {
          "$ref": "#/definitions/Error"
        },
        {
          "title": "Unauthorized"
        }
      ]
    },
    "ValidationError": {
      "allOf": [
        {
          "$ref": "#/definitions/Error"
        },
        {
          "title": "ValidationError"
        },
        {
          "properties": {
            "details": {
              "type": "array",
              "items": {
                "title": "FieldError",
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  },
                  "param": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "Pagination": {
      "title": "Pagination",
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "Page result"
        },
        "pageSize": {
          "type": "integer",
          "description": "Size of result per page"
        },
        "rowCount": {
          "type": "integer",
          "description": "Total count of results"
        },
        "pageCount": {
          "type": "integer",
          "description": "Total count of pages"
        }
      }
    },
    "FiatCurrencyResponse": {
      "title": "FiatCurrencyResponse",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "fiatcurrency id"
        },
        "name": {
          "type": "string",
          "description": "name of fiatcurrency"
        },
        "status": {
          "type": "string",
          "description": "status of fiatcurrency"
        },
        "symbol": {
          "type": "string",
          "description": "symbol of fiatcurrency"
        },
        "acronym": {
          "type": "string",
          "description": "acronym of fiatcurrency"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Fiatcurrency creation datetime"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Fiatcurrency update datetime"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Fiatcurrency delete datetime"
        }
      }
    },
    "ListFiatCurrencyResponse": {
      "title": "ListFiatCurrencyResponse",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "title": "Fiatcurrencies",
            "type": "object",
            "$ref": "#/definitions/FiatCurrencyResponse"
          }
        }
      }
    },
    "FilterFiatCurrencyParams": {
      "title": "FilterFiatCurrencyParams",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of fiat",
          "nullable": true,
          "maxLength": 45
        },
        "status": {
          "type": "string",
          "description": "Status of fiat",
          "nullable": true,
          "maxLength": 10,
          "enum": ["enabled", "disabled"]
        }
      }
    },
    "SearchFiatCurrenciesParams": {
      "title": "SearchFiatCurrenciesParams",
      "type": "object",
      "properties": {
        "filter": {
          "type": "object",
          "description": "filter for search categories store",
          "$ref": "#/definitions/FilterFiatCurrencyParams"
        },
        "page": {
          "type": "integer",
          "description": "current page",
          "minimum": 1
        },
        "pageSize": {
          "type": "integer",
          "description": "number of element for page",
          "minimum": 1
        },
        "sort": {
          "type": "string",
          "description": "sort list",
          "nullable": true,
          "enum": ["id", "name", "status", "symbol", "acronym", "created_at"]
        },
        "order": {
          "type": "string",
          "description": "order by",
          "nullable": true,
          "enum": ["asc", "desc"]
        }
      },
      "required": ["filter", "page", "pageSize"]
    },
    "FilterFiatCurrencyResponse": {
      "title": "FilterFiatCurrencyResponse",
      "type": "object",
      "properties": {
        "pagination": {
          "type": "object",
          "description": "Pagination info",
          "$ref": "#/definitions/Pagination"
        },
        "fiatCurrencies": {
          "type": "array",
          "items": {
            "title": "FiatCurrencyResponse",
            "type": "object",
            "$ref": "#/definitions/FiatCurrencyResponse"
          }
        }
      }
    },
    "CryptoCurrencyResponse": {
      "title": "CryptoCurrencyResponse",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "cryptocurrency id"
        },
        "name": {
          "type": "string",
          "description": "name of cryptocurrency"
        },
        "icon": {
          "type": "string",
          "description": "icon of cryptocurrency"
        },
        "acronym": {
          "type": "string",
          "description": "acronym of cryptocurrency"
        },
        "status": {
          "type": "string",
          "description": "status of cryptocurrency"
        },
        "wallet_name": {
          "type": "string",
          "description": "wallet name of cryptocurrency"
        },
        "id_coinmarket": {
          "type": "integer",
          "description": "coinmarket id of cryptocurrency"
        },
        "url_detail": {
          "type": "string",
          "description": "url detail transaction of cryptocurrency"
        },
        "apply_discount": {
          "type": "string",
          "description": "discount to apply of cryptocurrency"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Cryptocurrency creation datetime"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Cryptocurrency update datetime"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Cryptocurrency delete datetime"
        }
      }
    },
    "ListCryptoCurrencyResponse": {
      "title": "ListCryptoCurrencyResponse",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "title": "Cryptocurrencies",
            "type": "object",
            "$ref": "#/definitions/CryptoCurrencyResponse"
          }
        }
      }
    },
    "FilterCryptoCurrencyParams": {
      "title": "FilterCryptoCurrencyParams",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of fiat",
          "nullable": true,
          "maxLength": 45
        },
        "status": {
          "type": "string",
          "description": "Status of fiat",
          "nullable": true,
          "maxLength": 10,
          "enum": ["enabled", "disabled"]
        }
      }
    },
    "SearchCryptoCurrenciesParams": {
      "title": "SearchCryptoCurrenciesParams",
      "type": "object",
      "properties": {
        "filter": {
          "type": "object",
          "description": "filter for search categories store",
          "$ref": "#/definitions/FilterCryptoCurrencyParams"
        },
        "page": {
          "type": "integer",
          "description": "current page",
          "minimum": 1
        },
        "pageSize": {
          "type": "integer",
          "description": "number of element for page",
          "minimum": 1
        },
        "sort": {
          "type": "string",
          "description": "sort list",
          "nullable": true,
          "enum": ["id", "name", "acronym", "status", "wallet_name", "id_coinmarket", "apply_discount", "created_at"]
        },
        "order": {
          "type": "string",
          "description": "order by",
          "nullable": true,
          "enum": ["asc", "desc"]
        }
      },
      "required": ["filter", "page", "pageSize"]
    },
    "FilterCryptoCurrencyResponse": {
      "title": "FilterCryptoCurrencyResponse",
      "type": "object",
      "properties": {
        "pagination": {
          "type": "object",
          "description": "Pagination info",
          "$ref": "#/definitions/Pagination"
        },
        "cryptoCurrencies": {
          "type": "array",
          "items": {
            "title": "CryptoCurrencyResponse",
            "type": "object",
            "$ref": "#/definitions/CryptoCurrencyResponse"
          }
        }
      }
    },
    "FiatCurrencyParams": {
      "title": "FiatCurrencyParams",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name of fiat",
          "maxLength": 45
        },
        "status": {
          "type": "string",
          "description": "status of fiat",
          "maxLength": 10,
          "enum": ["enabled", "disabled"]
        },
        "symbol": {
          "type": "string",
          "description": "symbol of fiat",
          "maxLength": 3
        },
        "acronym": {
          "type": "string",
          "description": "acronym of fiat",
          "maxLength": 4
        }
      },
      "required": ["name", "status", "symbol", "acronym"]
    },
    "CryptoCurrencyParams": {
      "title": "CryptoCurrencyParams",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name of cryptocurrency",
          "maxLength": 45
        },
        "icon": {
          "type": "string",
          "description": "icon of cryptocurrency",
          "maxLength": 45,
          "nullable": true
        },
        "acronym": {
          "type": "string",
          "description": "acronym of cryptocurrency",
          "maxLength": 10
        },
        "status": {
          "type": "string",
          "description": "status of cryptocurrency",
          "maxLength": 10,
          "enum": ["enabled", "disabled"]
        },
        "walletName": {
          "type": "string",
          "description": "Wallet name of cryptocurrency",
          "maxLength": 255
        },
        "idCoinmarket": {
          "type": "integer",
          "description": "id of cryptocurency on coinmarket"
        },
        "urlDetail": {
          "type": "string",
          "description": "url to detail of transaction",
          "maxLength": 255,
          "nullable": true
        },
        "applyDiscount": {
          "type": "string",
          "description": "discount to apply",
          "maxLength": 10,
          "enum": ["enabled", "disabled"]
        }
      },
      "required": ["name", "acronym", "status", "walletName", "idCoinmarket", "applyDiscount"]
    },
    "ActiveClientParams": {
      "title": "ActiveClientParams",
      "type": "object",
      "properties": {
        "smscode": {
          "type": "string",
          "description": "SMS code sent",
          "maxLength": 255
        }
      },
      "required": ["smscode"]
    },
    "ActiveStoreParams": {
      "title": "ActiveStoreParams",
      "type": "object",
      "properties": {
        "smscode": {
          "type": "string",
          "description": "SMS code sent",
          "maxLength": 255
        },
        "storeId": {
          "type": "integer",
          "description": "Unique identifier for Store"
        }
      },
      "required": ["smscode", "storeId"]
    },
    "DeviceStoreRequest": {
      "title": "Device Request Description",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for request"
        },
        "status_store": {
          "type": "string",
          "description": "Status of Store"
        },
        "store_id": {
          "type": "integer",
          "description": "Unique identifier representing a specific store"
        },
        "deviceId": {
          "type": "string",
          "description": "Device id to link"
        },
        "make_model": {
          "type": "string",
          "description": "Model of device"
        },
        "serial_num": {
          "type": "string",
          "description": "Serial number of device"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Device creation datetime"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Device update datetime"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Device update datetime"
        }
      }
    },
    "DeviceClientRequest": {
      "title": "Device Request Description",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for request"
        },
        "status_user": {
          "type": "string",
          "description": "Status of client"
        },
        "user_id": {
          "type": "integer",
          "description": "Unique identifier representing a specific client"
        },
        "deviceId": {
          "type": "string",
          "description": "Device id to link"
        },
        "make_model": {
          "type": "string",
          "description": "Model of device"
        },
        "serial_num": {
          "type": "string",
          "description": "Serial number of device"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Device creation datetime"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Device update datetime"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Device update datetime"
        }
      }
    },
    "PhoneRequest": {
      "title": "Phone Request Description",
      "type": "object",
      "properties": {
        "phoneCode": {
          "type": "string",
          "description": "Phone user country code"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone of the user"
        }
      }
    },
    "LinkStoreParams": {
      "title": "Link Store Request Description",
      "type": "object",
      "properties": {
        "storeId": {
          "type": "integer",
          "description": "Unique identifier for Store"
        },
        "makeModel": {
          "type": "string",
          "description": "Model of device",
          "nullable": true,
          "maxLength": 100
        },
        "serialNum": {
          "type": "string",
          "description": "Serial number of device",
          "nullable": true,
          "maxLength": 150
        }
      },
      "required": ["storeId"]
    },
    "ResendLinkStoreParams": {
      "title": "Resend Link Store Request Description",
      "type": "object",
      "properties": {
        "storeId": {
          "type": "integer",
          "description": "Unique identifier for Store"
        }
      },
      "required": ["storeId"]
    },
    "Device": {
      "title": "Device",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for request"
        },
        "status_user": {
          "type": "string",
          "description": "Status of client"
        },
        "user_id": {
          "type": "integer",
          "description": "Unique identifier representing a specific client"
        },
        "status_store": {
          "type": "string",
          "description": "Status of Store"
        },
        "store_id": {
          "type": "integer",
          "description": "Unique identifier representing a specific store"
        },
        "deviceId": {
          "type": "string",
          "description": "Device id to link"
        },
        "make_model": {
          "type": "string",
          "description": "Model of device"
        },
        "serial_num": {
          "type": "string",
          "description": "Serial number of device"
        },
        "onesignal_id": {
          "type": "string",
          "description": "Unique identifier of one signal"
        },
        "default_language": {
          "type": "string",
          "description": "Default language of app"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Device creation datetime"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Device update datetime"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Device update datetime"
        }
      }
    },
    "FilterDevice": {
      "title": "FilterDevice",
      "type": "object",
      "properties": {
        "userId": {
          "type": "integer",
          "description": "Unique identifier representing a specific store",
          "nullable": true
        },
        "status": {
          "type": "string",
          "description": "Status of Store",
          "nullable": true,
          "maxLength": 10,
          "enum": ["pending", "enabled", "disabled"]
        },
        "makeModel": {
          "type": "string",
          "description": "Model of device",
          "nullable": true,
          "maxLength": 100
        },
        "serialNum": {
          "type": "string",
          "description": "Serial number of device",
          "nullable": true,
          "maxLength": 150
        }
      }
    },
    "SearchDevices": {
      "title": "SearchDevices",
      "type": "object",
      "properties": {
        "filter": {
          "type": "object",
          "description": "filter for search devices",
          "$ref": "#/definitions/FilterDevice"
        },
        "page": {
          "type": "integer",
          "description": "current page",
          "minimum": 1
        },
        "pageSize": {
          "type": "integer",
          "description": "number of element for page",
          "minimum": 1
        },
        "sort": {
          "type": "string",
          "description": "sort list",
          "nullable": true,
          "enum": ["id", "device_id", "status_user", "status_store", "user_id", "store_id", "make_model", "serial_num", "default_language", "created_at"]
        },
        "order": {
          "type": "string",
          "description": "order by",
          "nullable": true,
          "enum": ["asc", "desc"]
        }
      },
      "required": ["filter", "page", "pageSize"]
    },
    "SearchDevicesResponse": {
      "title": "SearchDevicesResponse",
      "type": "object",
      "properties": {
        "pagination": {
          "type": "object",
          "description": "Pagination info",
          "$ref": "#/definitions/Pagination"
        },
        "devices": {
          "type": "array",
          "items": {
            "title": "Devices",
            "type": "object",
            "$ref": "#/definitions/Device"
          }
        }
      }
    },
    "ListDevicesResponse": {
      "title": "ListDevicesResponse",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "title": "Devices",
            "type": "object",
            "$ref": "#/definitions/Device"
          }
        }
      }
    },
    "ChangeLanguage": {
      "title": "Link Store Request Description",
      "type": "object",
      "properties": {
        "language": {
          "type": "string",
          "description": "Default language",
          "minLength": 2,
          "maxLength": 2
        }
      },
      "required": ["language"]
    },
    "ChangeOneSignalId": {
      "title": "ChangeOneSignalId",
      "type": "object",
      "properties": {
        "onesignal": {
          "type": "string",
          "description": "One signal id"
        }
      },
      "required": ["onesignal"]
    },
    "CountryResponse": {
      "title": "CountryResponse",
      "type": "object",
      "properties": {
        "country_id": {
          "type": "integer",
          "description": "unique identifier"
        },
        "country_name": {
          "type": "string",
          "description": "name of country"
        },
        "country_code": {
          "type": "string",
          "description": "code of country"
        },
        "phone_code": {
          "type": "integer",
          "description": "phone code of country"
        },
        "iso_code_3": {
          "type": "string",
          "description": "iso code of country"
        },
        "address_format": {
          "type": "string",
          "description": "address format of country"
        },
        "postcode_required": {
          "type": "integer",
          "description": "postcode required for country"
        },
        "status": {
          "type": "integer",
          "description": "status of country"
        },
        "lang_ref_id": {
          "type": "integer",
          "description": "language reference unique identifier"
        }
      }
    },
    "ListCountriesResponse": {
      "title": "ListCountriesResponse",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "title": "Countries",
            "type": "object",
            "$ref": "#/definitions/CountryResponse"
          }
        }
      }
    },
    "StateResponse": {
      "title": "StateResponse",
      "type": "object",
      "properties": {
        "state_id": {
          "type": "integer",
          "description": "unique identifier"
        },
        "country_id": {
          "type": "integer",
          "description": "unique identifier of country"
        },
        "state_name": {
          "type": "string",
          "description": "name of state"
        },
        "state_code": {
          "type": "string",
          "description": "code of state"
        },
        "status": {
          "type": "integer",
          "description": "status of state"
        }
      }
    },
    "ListStatesResponse": {
      "title": "ListStatesResponse",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "title": "States",
            "type": "object",
            "$ref": "#/definitions/StateResponse"
          }
        }
      }
    },
    "NotificationAppFilter": {
      "title": "NotificationAppFilter",
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "Status of notification",
          "nullable": true,
          "maxLength": 10,
          "enum": ["pending", "readed", "hidden"]
        },
        "type": {
          "type": "string",
          "description": "Type of notification",
          "nullable": true,
          "maxLength": 20,
          "enum": ["buy", "deposit", "withdraw"]
        }
      }
    },
    "NotificationAppResponse": {
      "title": "NotificationAppResponse",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier of notificacion"
        },
        "type": {
          "type": "string",
          "description": "Type of notification"
        },
        "status": {
          "type": "string",
          "description": "Status of notification"
        },
        "message": {
          "type": "string",
          "description": "Message of notification"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Notification creation datetime"
        }
      }
    },
    "SearchNotificationsApp": {
      "title": "SearchNotificationsApp",
      "type": "object",
      "properties": {
        "filter": {
          "type": "object",
          "description": "filter for search notifications",
          "$ref": "#/definitions/NotificationAppFilter"
        },
        "page": {
          "type": "integer",
          "description": "current page",
          "minimum": 1
        },
        "pageSize": {
          "type": "integer",
          "description": "number of element for page",
          "minimum": 1
        },
        "sort": {
          "type": "string",
          "description": "sort list",
          "nullable": true,
          "enum": ["id", "message", "status", "type", "pkid", "admin", "created_at"]
        },
        "order": {
          "type": "string",
          "description": "order by",
          "nullable": true,
          "enum": ["asc", "desc"]
        }
      },
      "required": ["filter", "page", "pageSize"]
    },
    "SearchNotificationsAppResponse": {
      "title": "SearchNotificationsApp",
      "type": "object",
      "properties": {
        "pagination": {
          "type": "object",
          "description": "Pagination info",
          "$ref": "#/definitions/Pagination"
        },
        "notifications": {
          "type": "array",
          "items": {
            "title": "Notifications App",
            "type": "object",
            "$ref": "#/definitions/NotificationAppResponse"
          }
        }
      }
    },
    "PasswordParams": {
      "title": "PasswordParams",
      "type": "object",
      "properties": {
        "passwordOld": {
          "type": "string",
          "description": "Old password",
          "maxLength": 255
        },
        "passwordNew": {
          "type": "string",
          "description": "New password",
          "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?!.*\\s)(?=.*[^\\da-zA-Z]).{6,15}$",
          "maxLength": 255
        },
        "passwordNew2": {
          "type": "string",
          "description": "Confirm password",
          "maxLength": 255
        },
        "tfacode": {
          "type": "string",
          "description": "2facode",
          "maxLength": 6
        }
      },
      "required": ["passwordOld", "passwordNew", "passwordNew2", "tfacode"]
    },
    "ResetChangeClientPasswordParams": {
      "title": "ResetChangeClientPasswordParams",
      "type": "object",
      "properties": {
        "deviceId": {
          "type": "string",
          "description": "Identifier of device",
          "maxLength": 255
        },
        "passwordNew": {
          "type": "string",
          "description": "New password",
          "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?!.*\\s)(?=.*[^\\da-zA-Z]).{6,15}$",
          "maxLength": 255
        },
        "passwordNew2": {
          "type": "string",
          "description": "Confirm password",
          "maxLength": 255
        },
        "verifyToken": {
          "type": "string",
          "description": "Verify token to confirm change password",
          "maxLength": 255
        }
      },
      "required": ["deviceId", "passwordNew", "passwordNew2", "verifyToken"]
    },
    "NewPasswordParams": {
      "title": "NewPasswordParams",
      "type": "object",
      "properties": {
        "passwordOld": {
          "type": "string",
          "description": "Old password",
          "maxLength": 255
        },
        "passwordNew": {
          "type": "string",
          "description": "New password",
          "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?!.*\\s)(?=.*[^\\da-zA-Z]).{6,15}$",
          "maxLength": 255
        },
        "passwordNew2": {
          "type": "string",
          "description": "Confirm password",
          "maxLength": 255
        }
      },
      "required": ["passwordOld", "passwordNew", "passwordNew2"]
    },
    "ResetChangeCommercePasswordParams": {
      "title": "ResetChangeCommercePasswordParams",
      "type": "object",
      "properties": {
        "passwordNew": {
          "type": "string",
          "description": "New password",
          "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?!.*\\s)(?=.*[^\\da-zA-Z]).{6,15}$",
          "maxLength": 255
        },
        "passwordNew2": {
          "type": "string",
          "description": "Confirm password",
          "maxLength": 255
        },
        "verifyToken": {
          "type": "string",
          "description": "Verify token to confirm change password",
          "maxLength": 255
        }
      },
      "required": ["passwordNew", "passwordNew2", "verifyToken"]
    },
    "LoginUserResponse": {
      "title": "LoginUserResponse",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "description": "Id of the user"
        },
        "user_id": {
          "type": "string",
          "description": "User identifier"
        },
        "addedby": {
          "type": "string",
          "description": "User added by"
        },
        "user_type": {
          "type": "string",
          "description": "User type"
        },
        "user_name": {
          "type": "string",
          "description": "User name"
        },
        "default_lang": {
          "type": "string",
          "description": "Default lang of the user"
        },
        "default_currency": {
          "type": "string",
          "description": "Default currency of user"
        }
      }
    },
    "ResetWebPasswordParams": {
      "title": "ResetWebPasswordParams",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "description": "email to send mail reset password",
          "maxLength": 255
        }
      },
      "required": ["email"]
    },
    "RankResponse": {
      "title": "RankResponse",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique identifier"
        },
        "type": {
          "type": "string",
          "description": "type of rank"
        },
        "level": {
          "type": "integer",
          "description": "level of rank"
        },
        "commission": {
          "type": "string",
          "description": "commission of rank"
        },
        "rank_max": {
          "type": "string",
          "description": "Maximum rank"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Category Store creation datetime"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Category Store update datetime"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Category Store update datetime"
        }
      }
    },
    "FilterRankResponse": {
      "title": "FilterRankResponse",
      "type": "object",
      "properties": {
        "pagination": {
          "type": "object",
          "description": "Pagination info",
          "$ref": "#/definitions/Pagination"
        },
        "ranks": {
          "type": "array",
          "items": {
            "title": "Ranks",
            "type": "object",
            "$ref": "#/definitions/RankResponse"
          }
        }
      }
    },
    "RankParams": {
      "title": "RankParams",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "type of rank",
          "maxLength": 10,
          "enum": ["client", "commerce"]
        },
        "level": {
          "type": "integer",
          "description": "level of rank",
          "enum": [1, 2, 3, 4, 5, 6, 7]
        },
        "commission": {
          "type": "string",
          "description": "commission of rank",
          "pattern": "^100$|^\\d{0,2}(\\.\\d{1,2})? *%?$",
          "maxLength": 10
        },
        "rankMax": {
          "type": "string",
          "description": "Maximum rank",
          "maxLength": 10,
          "enum": ["2", "3", "4", "5", "6", "7", "8"]
        }
      },
      "required": ["type", "level", "commission", "rankMax"]
    },
    "FilterRankParams": {
      "title": "FilterRankParams",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "type of rank",
          "nullable": true,
          "maxLength": 10,
          "enum": ["client", "commerce"]
        },
        "level": {
          "type": "integer",
          "description": "level of rank",
          "nullable": true,
          "enum": [1, 2, 3, 4, 5, 6, 7]
        },
        "rankMax": {
          "type": "string",
          "description": "Maximum rank",
          "nullable": true,
          "maxLength": 10,
          "enum": ["2", "3", "4", "5", "6", "7", "8"]
        }
      }
    },
    "SearchRanksParams": {
      "title": "SearchRanksParams",
      "type": "object",
      "properties": {
        "filter": {
          "type": "object",
          "description": "filter for search ranks",
          "$ref": "#/definitions/FilterRankParams"
        },
        "page": {
          "type": "integer",
          "description": "current page",
          "minimum": 1
        },
        "pageSize": {
          "type": "integer",
          "description": "number of element for page",
          "minimum": 1
        },
        "sort": {
          "type": "string",
          "description": "sort list",
          "nullable": true,
          "enum": ["id", "type", "level", "commission", "rank_max", "created_at"]
        },
        "order": {
          "type": "string",
          "description": "order by",
          "nullable": true,
          "enum": ["asc", "desc"]
        }
      },
      "required": ["filter", "page", "pageSize"]
    },
    "ReportDataBuySellResponse": {
      "title": "ReportDataBuySellResponse",
      "type": "object",
      "properties": {
        "sells": {
          "type": "number",
          "description": "number of sells"
        },
        "date": {
          "type": "string",
          "description": "month of sells"
        }
      }
    },
    "ListReportDataBuySellResponse": {
      "title": "ListReportDataBuySellResponse",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "title": "ReportDataBuySell",
            "type": "object",
            "$ref": "#/definitions/ReportDataBuySellResponse"
          }
        }
      }
    },
    "ReportDataWalletsResponse": {
      "title": "ReportDataWalletsResponse",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name of wallet"
        },
        "amount": {
          "type": "float",
          "description": "amount of cryptocurrency"
        },
        "acronym": {
          "type": "string",
          "description": "acronym of cryptocurrency"
        }
      }
    },
    "ListReportDataWalletsResponse": {
      "title": "ListReportDataWalletsResponse",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "title": "ReportDataWallets",
            "type": "object",
            "$ref": "#/definitions/ReportDataWalletsResponse"
          }
        }
      }
    },
    "Store": {
      "title": "Store",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier representing a specific store"
        },
        "user_id": {
          "type": "integer",
          "description": "Unique identifier representing a especific commerce"
        },
        "name": {
          "type": "string",
          "description": "Name of the store"
        },
        "address": {
          "type": "string",
          "description": "Address of the store"
        },
        "status": {
          "type": "string",
          "description": "Status of the store"
        },
        "latitude": {
          "type": "string",
          "description": "Latitude of the store"
        },
        "longitude": {
          "type": "string",
          "description": "Longitude of the store"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Store creation datetime"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Store update datetime"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Store update datetime"
        }
      }
    },
    "NewStore": {
      "title": "NewStore",
      "type": "object",
      "properties": {
        "categoryId": {
          "type": "integer",
          "description": "Unique identifier representing a especific commerce"
        },
        "name": {
          "type": "string",
          "description": "Name of the store",
          "maxLength": 100
        },
        "address": {
          "type": "string",
          "description": "Address of the store",
          "maxLength": 255
        },
        "status": {
          "type": "string",
          "description": "Status of the store",
          "maxLength": 10,
          "enum": ["enabled", "disabled"]
        },
        "latitude": {
          "type": "string",
          "description": "Latitude of the store",
          "pattern": "^[+-]?\\d+(\\.\\d+)?$",
          "maxLength": 100
        },
        "longitude": {
          "type": "string",
          "description": "Longitude of the store",
          "pattern": "^[+-]?\\d+(\\.\\d+)?$",
          "maxLength": 100
        },
        "discount": {
          "type": "string",
          "description": "Discount to apply",
          "pattern": "^100$|^\\d{0,2}(\\.\\d{1,2})? *%?$",
          "maxLength": 10
        },
        "commission": {
          "type": "string",
          "description": "Commission to apply",
          "pattern": "^100$|^\\d{0,2}(\\.\\d{1,2})? *%?$",
          "maxLength": 10
        }
      },
      "required": ["categoryId", "name", "address", "status", "latitude", "longitude", "discount", "commission"]
    },
    "FilterStore": {
      "title": "FilterStore",
      "type": "object",
      "properties": {
        "categoryId": {
          "type": "integer",
          "description": "Category ID of the store",
          "nullable": true
        },
        "name": {
          "type": "string",
          "description": "Name of the store",
          "nullable": true,
          "maxLength": 100
        },
        "address": {
          "type": "string",
          "description": "Address of the store",
          "nullable": true,
          "maxLength": 255
        },
        "status": {
          "type": "string",
          "description": "Status of the store",
          "nullable": true,
          "maxLength": 10,
          "enum": ["enabled", "disabled"]
        },
        "latitude": {
          "type": "string",
          "description": "Latitude of the store",
          "nullable": true,
          "pattern": "^[+-]?\\d+(\\.\\d+)?$",
          "maxLength": 100
        },
        "longitude": {
          "type": "string",
          "description": "Longitude of the store",
          "nullable": true,
          "pattern": "^[+-]?\\d+(\\.\\d+)?$",
          "maxLength": 100
        }
      }
    },
    "SearchStores": {
      "title": "SearchStores",
      "type": "object",
      "properties": {
        "filter": {
          "type": "object",
          "description": "filter for search stores",
          "$ref": "#/definitions/FilterStore"
        },
        "page": {
          "type": "integer",
          "description": "current page",
          "minimum": 1
        },
        "pageSize": {
          "type": "integer",
          "description": "number of element for page",
          "minimum": 1
        },
        "sort": {
          "type": "string",
          "description": "sort list",
          "nullable": true,
          "enum": ["id", "user_id", "category_id", "name", "address", "status", "longitude", "latitude", "discount", "commission", "created_at"]
        },
        "order": {
          "type": "string",
          "description": "order by",
          "nullable": true,
          "enum": ["asc", "desc"]
        }
      },
      "required": ["filter", "page", "pageSize"]
    },
    "SearchStoresResponse": {
      "title": "SearchStoresResponse",
      "type": "object",
      "properties": {
        "pagination": {
          "type": "object",
          "description": "Pagination info",
          "$ref": "#/definitions/Pagination"
        },
        "stores": {
          "type": "array",
          "items": {
            "title": "Stores",
            "type": "object",
            "$ref": "#/definitions/Store"
          }
        }
      }
    },
    "ListStoresResponse": {
      "title": "ListStoresResponse",
      "type": "object",
      "properties": {
        "stores": {
          "type": "array",
          "items": {
            "title": "Stores",
            "type": "object",
            "$ref": "#/definitions/Store"
          }
        }
      }
    },
    "TransactionResponse": {
      "title": "TransactionResponse",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "description": "id"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "date of transaction"
        },
        "type": {
          "type": "string",
          "description": "type of transaction"
        },
        "fiatCurrency": {
          "type": "string",
          "description": "fiat currency of transaction"
        },
        "fiatCurrencySymbol": {
          "type": "string",
          "description": "fiat currency symbol of transaction"
        },
        "ticket_id": {
          "type": "string",
          "description": "id ticket"
        },
        "amount_fiat": {
          "type": "string",
          "description": "amount_fiat"
        },
        "total_amount": {
          "type": "string",
          "description": "total amount of wallet"
        },
        "cryptoCurrency": {
          "type": "string",
          "description": "crypto currency of transaction"
        },
        "amount_crypto": {
          "type": "string",
          "description": "amount_crypto"
        },
        "idTransaction": {
          "type": "string",
          "description": "ID of transaction"
        }
      }
    },
    "FilterTrans": {
      "title": "FilterTrans",
      "type": "object",
      "properties": {
        "dateFrom": {
          "type": "string",
          "format": "date-time-pattern",
          "description": "date from",
          "pattern": "\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{1,2}:\\d{1,2}",
          "nullable": true
        },
        "dateTo": {
          "type": "string",
          "format": "date-time-pattern",
          "description": "date to",
          "pattern": "\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{1,2}:\\d{1,2}",
          "nullable": true
        },
        "type": {
          "type": "array",
          "description": "type of transactions",
          "nullable": true,
          "items": {
            "type": "string",
            "enum": ["buy/sell", "block/Dep", "block/Wid", "refund", "co/com", "co/cli", "co/wid"]
          }
        },
        "cryptoAmount": {
          "type": "string",
          "description": "amount crypto currency",
          "nullable": true
        },
        "fiatAmount": {
          "type": "string",
          "description": "amount fiat currency",
          "nullable": true
        },
        "cryptoType": {
          "type": "integer",
          "description": "crypto type",
          "nullable": true
        },
        "status": {
          "type": "string",
          "description": "status of transaction",
          "nullable": true,
          "enum": ["pending", "paid", "error", "expired", "cancel", "refund/pending", "refund/paid", "block", "cancel/refund", "confirm"]
        }
      }
    },
    "Transaction": {
      "title": "Transaction",
      "type": "object",
      "properties": {
        "filter": {
          "type": "object",
          "description": "filter for search transactions",
          "$ref": "#/definitions/FilterTrans"
        },
        "page": {
          "type": "integer",
          "description": "current page",
          "minimum": 1
        },
        "pageSize": {
          "type": "integer",
          "description": "number of element for page",
          "minimum": 1
        },
        "sort": {
          "type": "string",
          "description": "sort list",
          "nullable": true,
          "enum": ["id", "date", "type", "campaign_id", "status", "ranking", "level", "payment_date"]
        },
        "order": {
          "type": "string",
          "description": "order by",
          "nullable": true,
          "enum": ["asc", "desc"]
        }
      },
      "required": ["filter", "page", "pageSize"]
    },
    "TransactionBuy": {
      "title": "TransactionBuy",
      "type": "object",
      "properties": {
        "amount_fiat": {
          "type": "string",
          "description": "amount_fiat",
          "pattern": "^[+-]?\\d+(\\.\\d+)?$"
        },
        "longitude": {
          "type": "string",
          "description": "longitude",
          "pattern": "^[+-]?\\d+(\\.\\d+)?$"
        },
        "latitude": {
          "type": "string",
          "description": "latitude",
          "pattern": "^[+-]?\\d+(\\.\\d+)?$"
        },
        "fiatcurrency": {
          "type": "number",
          "description": "fiat currency id"
        },
        "cryptocurrency": {
          "type": "number",
          "description": "crypto currency id"
        },
        "campaign_id": {
          "type": "integer",
          "description": "campaign id",
          "nullable": true
        }
      },
      "required": ["amount_fiat", "longitude", "latitude", "fiatcurrency", "cryptocurrency"]
    },
    "TransactionDeposit": {
      "title": "TransactionDeposit",
      "type": "object",
      "properties": {
        "longitude": {
          "type": "string",
          "description": "longitude",
          "pattern": "^[+-]?\\d+(\\.\\d+)?$"
        },
        "latitude": {
          "type": "string",
          "description": "latitude",
          "pattern": "^[+-]?\\d+(\\.\\d+)?$"
        },
        "amount_crypto": {
          "type": "string",
          "description": "amount_crypto",
          "pattern": "^\\d+(\\.\\d{8})$"
        },
        "cryptocurrency": {
          "type": "integer",
          "description": "crypto currency id"
        }
      },
      "required": ["longitude", "latitude", "amount_crypto", "cryptocurrency"]
    },
    "TransactionPay": {
      "title": "TransactionPay",
      "type": "object",
      "properties": {
        "id_transaction": {
          "type": "integer",
          "description": "id_transaction"
        }
      },
      "required": ["id_transaccion"]
    },
    "TransactionBuyResponse": {
      "title": "TransactionBuyResponse",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id transaction"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "date of transaction"
        },
        "type": {
          "type": "string",
          "description": "type of transaction"
        },
        "ticket_id": {
          "type": "string",
          "description": "id ticket"
        },
        "amount_fiat": {
          "type": "string",
          "description": "amount_fiat"
        },
        "amount_crypto": {
          "type": "string",
          "description": "amount_crypto"
        },
        "fiatCurrency": {
          "type": "string",
          "description": "fiat currency of transaction"
        },
        "cryptoCurrency": {
          "type": "string",
          "description": "crypto currency of transaction"
        },
        "fiatCurrencySymbol": {
          "type": "string",
          "description": "fiat currency symbol of transaction"
        },
        "cryptoCurrencySymbol": {
          "type": "string",
          "description": "crypto currency symbol of transaction"
        },
        "store": {
          "type": "string",
          "description": "name of store"
        },
        "idTransaction": {
          "type": "string",
          "description": "ID of transaction"
        }
      }
    },
    "TransactionDepositResponse": {
      "title": "TransactionDepositResponse",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id transaction"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "date of transaction"
        },
        "type": {
          "type": "string",
          "description": "type of transaction"
        },
        "amount_crypto": {
          "type": "string",
          "description": "amount_crypto"
        },
        "cryptocurrency": {
          "type": "string",
          "description": "crypto currency of transaction"
        },
        "cryptocurrencySymbol": {
          "type": "string",
          "description": "crypto currency symbol of transaction"
        }
      }
    },
    "FilterWebTrans": {
      "title": "FilterWebTrans",
      "type": "object",
      "properties": {
        "dateFrom": {
          "type": "string",
          "format": "date-time-pattern",
          "description": "date from",
          "nullable": true,
          "pattern": "\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{1,2}:\\d{1,2}"
        },
        "dateTo": {
          "type": "string",
          "format": "date-time-pattern",
          "description": "date to",
          "nullable": true,
          "pattern": "\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{1,2}:\\d{1,2}"
        },
        "type": {
          "type": "array",
          "description": "type of transactions",
          "nullable": true,
          "items": {
            "type": "string",
            "enum": ["buy/sell", "block/Dep", "block/Wid", "refund", "co/com", "co/cli", "co/wid"]
          }
        },
        "cryptoAmount": {
          "type": "string",
          "description": "amount crypto currency",
          "nullable": true
        },
        "fiatAmount": {
          "type": "string",
          "description": "amount fiat currency",
          "nullable": true
        },
        "cryptoType": {
          "type": "integer",
          "description": "Cyptocurrency",
          "nullable": true
        },
        "transBlockchain": {
          "type": "string",
          "description": "ID of blockchain transaction",
          "nullable": true
        },
        "storeId": {
          "type": "integer",
          "description": "Unique identifier for Store",
          "nullable": true
        },
        "status": {
          "type": "string",
          "description": "status",
          "nullable": true,
          "maxLength": 15,
          "enum": ["pending", "paid", "error", "expired", "cancel", "refund/pending", "refund/paid", "block", "cancel/refund", "confirm"]
        }
      }
    },
    "TransactionWebFilter": {
      "title": "TransactionWebFilter",
      "type": "object",
      "properties": {
        "filter": {
          "type": "object",
          "description": "filter for search transactions",
          "$ref": "#/definitions/FilterWebTrans"
        },
        "page": {
          "type": "integer",
          "description": "current page",
          "minimum": 1
        },
        "pageSize": {
          "type": "integer",
          "description": "number of element for page",
          "minimum": 1
        },
        "sort": {
          "type": "string",
          "description": "sort list",
          "nullable": true,
          "enum": ["id", "date", "type", "campaign_id", "status", "ranking", "level", "payment_date"]
        },
        "order": {
          "type": "string",
          "description": "order by",
          "nullable": true,
          "enum": ["asc", "desc"]
        }
      },
      "required": ["filter", "page", "pageSize"]
    },
    "SearchTransactionsResponse": {
      "title": "SearchTransactionsResponse",
      "type": "object",
      "properties": {
        "pagination": {
          "type": "object",
          "description": "Pagination info",
          "$ref": "#/definitions/Pagination"
        },
        "transactions": {
          "type": "array",
          "items": {
            "title": "TransactionResponse",
            "type": "object",
            "$ref": "#/definitions/TransactionResponse"
          }
        }
      }
    },
    "TransactionWithdraw": {
      "title": "TransactionWithdraw",
      "type": "object",
      "properties": {
        "amount_crypto": {
          "type": "string",
          "description": "amount_crypto"
        },
        "longitude": {
          "type": "string",
          "description": "longitude"
        },
        "latitude": {
          "type": "string",
          "description": "latitude"
        },
        "cryptocurrency": {
          "type": "integer",
          "description": "crypto currency id"
        },
        "address": {
          "type": "string",
          "description": "address of wallet"
        }
      }
    },
    "TransactionWithdrawResponse": {
      "title": "TransactionWithdrawResponse",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id transaction"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "date of transaction"
        },
        "type": {
          "type": "string",
          "description": "type of transaction"
        },
        "address_wallet": {
          "type": "string",
          "description": "address of wallet"
        },
        "amount_crypto": {
          "type": "string",
          "description": "amount_crypto"
        },
        "cryptocurrency": {
          "type": "string",
          "description": "crypto currency of transaction"
        },
        "cryptocurrencySymbol": {
          "type": "string",
          "description": "crypto currency symbol of transaction"
        }
      }
    },
    "TransactionRefund": {
      "title": "TransactionRefund",
      "type": "object",
      "properties": {
        "transactionRefundId": {
          "type": "integer",
          "description": "Id transaction to refund"
        },
        "longitude": {
          "type": "string",
          "description": "longitude",
          "pattern": "^[+-]?\\d+(\\.\\d+)?$"
        },
        "latitude": {
          "type": "string",
          "description": "latitude",
          "pattern": "^[+-]?\\d+(\\.\\d+)?$"
        }
      },
      "required": ["transactionRefundId", "longitude", "latitude"]
    },
    "EditTransaction": {
      "title": "EditTransaction",
      "type": "object",
      "properties": {
        "ticketId": {
          "type": "string",
          "description": "Ticket ID of transaction"
        }
      },
      "required": ["ticketId"]
    },
    "2faParams": {
      "title": "2faParams",
      "type": "object",
      "properties": {
        "tfacode": {
          "type": "integer",
          "description": "2fa code",
          "minimum": 100000,
          "maximum": 999999
        }
      },
      "required": ["tfacode"]
    },
    "SeedObject": {
      "title": "SeedObject",
      "type": "object",
      "properties": {
        "tfacode": {
          "type": "string",
          "description": "tfacode"
        },
        "QRurl": {
          "type": "string",
          "description": "QRurl"
        }
      }
    },
    "Email": {
      "title": "Email Validation",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for request"
        },
        "user_id": {
          "type": "integer",
          "description": "Unique identifier representing a specific user"
        },
        "email": {
          "type": "string",
          "description": "Email for the user"
        },
        "verify_token": {
          "type": "string",
          "description": "Request token"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "User creation datetime"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "User update datetime"
        }
      }
    },
    "Phone": {
      "title": "Email Validation",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for request"
        },
        "user_id": {
          "type": "integer",
          "description": "Unique identifier representing a specific user"
        },
        "phone": {
          "type": "string",
          "description": "Phone for the user"
        },
        "verify_token": {
          "type": "string",
          "description": "Request token"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "User creation datetime"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "User update datetime"
        }
      }
    },
    "ResendEmailParams": {
      "title": "ResendEmailParams",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "description": "email to resend hash",
          "maxLength": 255
        }
      },
      "required": ["email"]
    },
    "VerifyPhoneParams": {
      "title": "VerifyPhoneParams",
      "type": "object",
      "properties": {
        "smscode": {
          "type": "string",
          "description": "sms code to verify mobile",
          "maxLength": 255
        }
      },
      "required": ["smscode"]
    },
    "WalletResponse": {
      "title": "WalletResponse",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "description": "id wallet"
        },
        "status": {
          "type": "string",
          "description": "status wallet"
        },
        "amount": {
          "type": "string",
          "description": "amount wallet"
        },
        "cryptoCurrency": {
          "type": "string",
          "description": "cryptoCurrency name"
        },
        "cryptoAcronym": {
          "type": "string",
          "description": "cryptoCurrency acronym"
        }
      }
    },
    "ListWallet": {
      "title": "ListWallet",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "description": "id wallet"
        },
        "status": {
          "type": "string",
          "description": "status wallet"
        },
        "cryptoCurrency": {
          "type": "string",
          "description": "cryptoCurrency name"
        },
        "cryptoAcronym": {
          "type": "string",
          "description": "cryptoCurrency acronym"
        }
      }
    },
    "Wallets": {
      "title": "Wallets",
      "type": "object",
      "properties": {
        "wallets": {
          "type": "object",
          "description": "list of wallets",
          "$ref": "#/definitions/ListWallet"
        }
      }
    },
    "CreateWallets": {
      "title": "CreateWallets",
      "type": "object",
      "properties": {
        "cryptocurrency_id": {
          "type": "integer",
          "description": "cryptocurrency id"
        }
      },
      "required": ["cryptocurrency_id"]
    },
    "CreateWalletsResponse": {
      "title": "CreateWalletsResponse",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "description": "Id wallet"
        },
        "status": {
          "type": "string",
          "description": "status wallet"
        },
        "amount": {
          "type": "string",
          "description": "Amount of wallet"
        },
        "cryptocurrency_id": {
          "type": "string",
          "description": "Id cryptocurrency"
        },
        "commerce_id": {
          "type": "string",
          "description": "Id commerce"
        }
      }
    },
    "UpdateWallets": {
      "title": "UpdateWallets",
      "type": "object",
      "properties": {
        "cryptocurrency_id": {
          "type": "integer",
          "description": "cryptocurrency id"
        },
        "status": {
          "type": "string",
          "description": "status wallet",
          "enum": ["active", "desactive", "hidden", "favorite"]
        }
      },
      "required": ["cryptocurrency_id", "status"]
    },
    "UpdateWalletsResponse": {
      "title": "UpdateWalletsResponse",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "description": "Id wallet"
        },
        "status": {
          "type": "string",
          "description": "status wallet"
        }
      }
    },
    "FilterWallet": {
      "title": "FilterWallet",
      "type": "object",
      "properties": {
        "cryptocurrencyId": {
          "type": "integer",
          "description": "Cryptocurrency id",
          "nullable": true
        },
        "status": {
          "type": "string",
          "description": "Status wallet",
          "nullable": true,
          "maxLength": 10,
          "enum": ["active", "desactive", "hidden", "favorite"]
        }
      }
    },
    "SearchWallets": {
      "title": "SearchWallets",
      "type": "object",
      "properties": {
        "filter": {
          "type": "object",
          "description": "filter for search wallets",
          "$ref": "#/definitions/FilterWallet"
        },
        "page": {
          "type": "integer",
          "description": "current page",
          "minimum": 1
        },
        "pageSize": {
          "type": "integer",
          "description": "number of element for page",
          "minimum": 1
        },
        "sort": {
          "type": "string",
          "description": "sort list",
          "nullable": true,
          "enum": ["id", "user_id", "commerce_id", "cryptocurrency_id", "status", "amount", "created_at"]
        },
        "order": {
          "type": "string",
          "description": "order by",
          "nullable": true,
          "enum": ["asc", "desc"]
        }
      }
    },
    "ListWalletsResponse": {
      "title": "ListWalletsResponse",
      "type": "object",
      "properties": {
        "pagination": {
          "type": "object",
          "description": "Pagination info",
          "$ref": "#/definitions/Pagination"
        },
        "wallets": {
          "type": "array",
          "items": {
            "title": "Wallets",
            "type": "object",
            "$ref": "#/definitions/ListWallet"
          }
        }
      }
    },
    "WebhookParams": {
      "title": "WebhookParams",
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string",
          "description": "Unique identifier of request"
        },
        "notification": {
          "type": "string",
          "description": "Notification"
        },
        "error": {
          "type": "string",
          "description": "Error"
        },
        "message": {
          "type": "string",
          "description": "Message"
        },
        "response": {
          "type": "object",
          "description": "Response",
          "nullable": true
        },
        "stackrequests": {
          "type": "array",
          "description": "Stack requests",
          "nullable": true,
          "items": {}
        }
      },
      "required": ["requestId", "error", "message"]
    }
  },
  "responses": {},
  "parameters": {},
  "securityDefinitions": {
    "Bearer": {
      "description": "For accessing the API a valid JWT token must be passed in all the queries in the 'Authorization' header. <br><br>A valid JWT token is generated by the API and retourned as answer of a call to the route /auth/token giving a valid user & password.<br><br>",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": []
}
